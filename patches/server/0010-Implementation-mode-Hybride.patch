From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Remi <remi.riu95@gmail.com>
Date: Sat, 5 Nov 2022 13:49:43 +0100
Subject: [PATCH] Implementation mode Hybride


diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index 112029cb275d45dced60807820f1bfe9f394496d..38f624e7b8ef2b76433aa4d19a05000ff20c4352 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -51,6 +51,8 @@ public final class MinecraftTimings {
 
     public static final Timing midTickChunkTasks = Timings.ofSafe("Mid Tick Chunk Tasks");
 
+    public static final Timing hybridEngineTimer = Timings.ofSafe("Hybrid Engine");
+
     private static final Map<Class<?>, String> taskNameCache = new MapMaker().weakKeys().makeMap();
 
     private MinecraftTimings() {}
diff --git a/src/main/java/fr/thekinrar/papyrus/Metrics.java b/src/main/java/fr/thekinrar/papyrus/Metrics.java
index 7c284c9b2ffd4145b6cffb73b1cfcc3b5c3fdaae..ff7346e595cbe2b63aa31886a4d521dc3283ad4c 100644
--- a/src/main/java/fr/thekinrar/papyrus/Metrics.java
+++ b/src/main/java/fr/thekinrar/papyrus/Metrics.java
@@ -593,7 +593,7 @@ public class Metrics {
                 }));
 
                 metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
-                metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
+                metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : (Bukkit.getHybridMode() ? "hybrid" : "offline")));
                 metrics.addCustomChart(new Metrics.SimplePie("papyrus_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown"));
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
diff --git a/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java b/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
index ced71699e493246bdacc6458e43674eccbb8879c..7d88d166b3c70e315afd281f20e587012849fedf 100644
--- a/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
+++ b/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
@@ -177,4 +177,9 @@ public class PapyrusConfig {
         config.addDefault(path, def);
         return config.getString(path, config.getString(path));
     }
+
+    public static boolean hybridMode = false;
+    private static void hybridMode() {
+        hybridMode = getBoolean("settings.hybrid-mode", false);
+    }
 }
diff --git a/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java b/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java
new file mode 100644
index 0000000000000000000000000000000000000000..4d5e7e7318a4feae1df4ef7eb5176c9452520e40
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java
@@ -0,0 +1,13 @@
+package fr.thekinrar.papyrus;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.util.permissions.DefaultPermissions;
+
+public final class PapyrusPermissions {
+    private static final String ROOT = "papyrus.command";
+
+    public static void registerPermissions() {
+        Permission parent = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all Papyrus commands");
+        parent.recalculatePermissibles();
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPlayer.java b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..82426098747822d153fec3daac4b8b2db2e5370d
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPlayer.java
@@ -0,0 +1,46 @@
+package fr.thekinrar.papyrus.hybrid;
+
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+
+public class HybridPlayer {
+    private final CraftPlayer player;
+    private final CraftServer server;
+
+    private int ticks = -1;
+
+    public HybridPlayer(CraftPlayer player) {
+        this.player = player;
+        this.server = player.getHandle().server.server;
+    }
+
+    public void tick() {
+        ++ticks;
+
+        if (ticks == 0) {
+            server.getHandle().sendAllPlayerInfo(player.getHandle());
+        }
+
+        if (ticks % 20 == 0) {
+            addEffect(PotionEffectType.BLINDNESS, 0);
+        }
+    }
+
+    private void addEffect(PotionEffectType type, int amplifier) {
+        player.addPotionEffect(
+            new PotionEffect(type, 100, amplifier, false, false, false),
+            true,
+            EntityPotionEffectEvent.Cause.HYBRID_AUTH
+        );
+    }
+
+    public void clearEffects() {
+        player.removePotionEffect(PotionEffectType.BLINDNESS, EntityPotionEffectEvent.Cause.HYBRID_AUTH);
+
+        player.getHandle().lastSentExp = -1;
+        server.getHandle().sendAllPlayerInfo(player.getHandle());
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 39767c02d54f8f91a116a245cc621b5d19cdb1de..22d25213ed860d8a6908b59e3f2a9d44aae66055 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1490,6 +1490,18 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.profiler.popPush("levels");
         //Iterator iterator = this.getAllLevels().iterator(); // Paper - moved down
 
+        // Papyrus start
+        if (server.getHybridMode()) {
+            MinecraftTimings.hybridEngineTimer.startTiming();
+            for(ServerPlayer player : playerList.players) {
+                if (player.unauthenticated) {
+                    player.getBukkitEntity().getHybrid().tick();
+                }
+            }
+            MinecraftTimings.hybridEngineTimer.stopTiming();
+        }
+        // Papyrus end
+
         // CraftBukkit start
         // Run tasks that are waiting on processing
         MinecraftTimings.processQueueTimer.startTiming(); // Spigot
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 1d4d02f26391ac55c7631817f09d05e2769b0d29..7d6984643ce4c8a5e9a59c9bb13ad39c3ee1bd9c 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -772,7 +772,12 @@ public class ServerPlayer extends Player {
 
             if (this.totalExperience != this.lastSentExp) {
                 this.lastSentExp = this.totalExperience;
-                this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
+
+                if (this.unauthenticated) {
+                    this.connection.send(new ClientboundSetExperiencePacket(0, 0, 0));
+                } else {
+                    this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
+                }
             }
 
             if (this.tickCount % 20 == 0) {
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 87fdab763266b8a02a20edc1cc06b1a8f7dbd8b6..23aa4e341817704da5f5714ba7f9e9ebfd91979a 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1526,6 +1526,13 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             }
                             // Paper end
 
+                            // Papyrus start - Hybrid mode
+                            if (player.unauthenticated) {
+                                this.teleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot());
+                                return;
+                            }
+                            // Papyrus end
+
                             if (!this.player.isChangingDimension() && (!this.player.getLevel().getGameRules().getBoolean(GameRules.RULE_DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isFallFlying())) {
                                 float f2 = this.player.isFallFlying() ? 300.0F : 100.0F;
 
@@ -1851,6 +1858,10 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
         switch (packetplayinblockdig_enumplayerdigtype) {
             case SWAP_ITEM_WITH_OFFHAND:
+                if (player.unauthenticated) {
+                    return; // Papyrus
+                }
+
                 if (!this.player.isSpectator()) {
                     ItemStack itemstack = this.player.getItemInHand(InteractionHand.OFF_HAND);
 
@@ -1878,6 +1889,10 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
                 return;
             case DROP_ITEM:
+                if (player.unauthenticated) {
+                    return; // Papyrus
+                }
+
                 if (!this.player.isSpectator()) {
                     // limit how quickly items can be dropped
                     // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
@@ -1899,12 +1914,20 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
                 return;
             case DROP_ALL_ITEMS:
+                if (player.unauthenticated) {
+                    return; // Papyrus
+                }
+
                 if (!this.player.isSpectator()) {
                     this.player.drop(true);
                 }
 
                 return;
             case RELEASE_USE_ITEM:
+                if (player.unauthenticated) {
+                    return; // Papyrus
+                }
+
                 this.player.releaseUsingItem();
                 return;
             case START_DESTROY_BLOCK:
@@ -2444,6 +2467,13 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             // Do nothing, this is coming from a plugin
         // Paper start
         } else if (true) {
+            // Papyrus start
+            if (player.unauthenticated && !s.startsWith("/")) {
+                ServerGamePacketListenerImpl.LOGGER.warn(this.player.getScoreboardName() + " tried chatting while unauthenticated: " + s);
+                return;
+            }
+            // Papyrus end
+
             final ChatProcessor cp = new ChatProcessor(this.server, this.player, original, async);
             cp.process();
             // Paper end
@@ -3584,6 +3614,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     // CraftBukkit start
     private static final ResourceLocation CUSTOM_REGISTER = new ResourceLocation("register");
     private static final ResourceLocation CUSTOM_UNREGISTER = new ResourceLocation("unregister");
+    private static final ResourceLocation CUSTOM_HYBRID = new ResourceLocation("bungeecord:hybrid");
 
     private static final ResourceLocation MINECRAFT_BRAND = new ResourceLocation("brand"); // Paper - Brand support
 
@@ -3610,6 +3641,18 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 ServerGamePacketListenerImpl.LOGGER.error("Couldn\'t unregister custom payload", ex);
                 this.disconnect("Invalid payload UNREGISTER!", org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_PAYLOAD); // Paper - kick event cause
             }
+        } else if (packet.identifier.equals(CUSTOM_HYBRID)) {
+            try {
+                String[] data = packet.data.toString(java.nio.charset.StandardCharsets.UTF_8).split("\0");
+                if("authenticate".equals(data[0])) {
+                    player.unauthenticated = false;
+                    player.getBukkitEntity().getHybrid().clearEffects();
+                } else {
+                    throw new IllegalArgumentException("Unknown subchannel: " + data[0]);
+                }
+            } catch (Exception ex) {
+                ServerGamePacketListenerImpl.LOGGER.error("Couldn't process hybrid custom payload", ex);
+            }
         } else {
             try {
                 byte[] data = new byte[packet.data.readableBytes()];
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 32b36c7edfea05e29300cf3f46e7aebbf496961c..59fbbe32f0148e602a4fd4e14719175f2dac4f7e 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -242,6 +242,13 @@ public abstract class PlayerList {
             player.fudgeSpawnLocation(worldserver1); // only move to spawn on first login, otherwise, stay where you are....
         }
         // Paper end
+
+        // Papyrus start
+        if (cserver.getHybridMode()) {
+            player.getBukkitEntity().initHybrid();
+        }
+        // Papyrus end
+
         player.setLevel(worldserver1);
         String s1 = "local";
 
@@ -285,7 +292,8 @@ public abstract class PlayerList {
         playerconnection.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
         playerconnection.send(new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes()));
         playerconnection.send(new ClientboundUpdateTagsPacket(TagNetworkSerialization.serializeTagsToNetwork(this.registries)));
-        this.sendPlayerPermissionLevel(player);
+        playerconnection.send(new ClientboundEntityEventPacket(player, (byte) (hasReducedDebugInfo(player) ? 22 : 23))); // Paper - fix this rule not being initialized on the client
+        this.sendPlayerPermissionLevel(player); // TODO Papyrus - use this instead of above line
         player.getStats().markAllDirty();
         player.getRecipeBook().sendInitialRecipeBook(player);
         this.updateEntireScoreboard(worldserver1.getScoreboard(), player);
@@ -1255,19 +1263,35 @@ public abstract class PlayerList {
     }
 
     public void sendAllPlayerInfo(ServerPlayer player) {
-        player.inventoryMenu.sendAllDataToRemote();
+        // Papyrus  start
+        if (player.unauthenticated) {
+            new net.minecraft.world.inventory.InventoryMenu(new net.minecraft.world.entity.player.Inventory(player), true, player).sendAllDataToRemote();
+        } else { // Papyrus end
+            player.inventoryMenu.sendAllDataToRemote();
+        }
+
         // entityplayer.resetSentInfo();
         player.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
         player.getEntityData().refresh(player); // CraftBukkkit - SPIGOT-7218: sync metadata
         player.connection.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
         // CraftBukkit start - from GameRules
-        int i = player.level.getGameRules().getBoolean(GameRules.RULE_REDUCEDDEBUGINFO) ? 22 : 23;
-        player.connection.send(new ClientboundEntityEventPacket(player, (byte) i));
-        float immediateRespawn = player.level.getGameRules().getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN) ? 1.0F: 0.0F;
+        updateReducedDebugInfo(player); // Papyrus
+        float immediateRespawn = player.level.getGameRules().getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN) ? 1.0F : 0.0F;
         player.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.IMMEDIATE_RESPAWN, immediateRespawn));
         // CraftBukkit end
     }
 
+    // Papyrus start
+    public void updateReducedDebugInfo(ServerPlayer player) {
+        int i = hasReducedDebugInfo(player) ? 22 : 23;
+        player.connection.send(new ClientboundEntityEventPacket(player, (byte) i));
+    }
+    // Papyrus end
+
+    private boolean hasReducedDebugInfo(ServerPlayer player) {
+        return player.level.getGameRules().getBoolean(GameRules.RULE_REDUCEDDEBUGINFO) || player.unauthenticated;
+    }
+
     public int getPlayerCount() {
         return this.players.size();
     }
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 95a27d28f73039693ca64601954af62028413634..3cc01f77d976f499f5c1f36c4c778f3a6b875c60 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -1135,10 +1135,14 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 override = new MobEffectInstance(mobeffect1).update(mobeffect);
             }
 
-            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect1, mobeffect, cause, override);
-            if (event.isCancelled()) {
-                return false;
+            if (!cause.equals(EntityPotionEffectEvent.Cause.HYBRID_AUTH)) { // Papyrus
+                EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect1, mobeffect, cause, override);
+                if (event.isCancelled()) {
+                    return false;
+                }
+                override = event.isOverride(); // Papyrus - see below
             }
+
             // CraftBukkit end
 
             if (mobeffect1 == null) {
@@ -1146,7 +1150,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 this.onEffectAdded(mobeffect, entity);
                 return true;
                 // CraftBukkit start
-            } else if (event.isOverride()) {
+            } else if (override) { // Papyrus - read override directly
                 mobeffect1.update(mobeffect);
                 this.onEffectUpdated(mobeffect1, true, entity);
                 // CraftBukkit end
@@ -1204,9 +1208,11 @@ public abstract class LivingEntity extends Entity implements Attackable {
             return null;
         }
 
-        EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
-        if (event.isCancelled()) {
-            return null;
+        if (!cause.equals(EntityPotionEffectEvent.Cause.HYBRID_AUTH)) {
+            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
+            if (event.isCancelled()) {
+                return null;
+            }
         }
 
         return (MobEffectInstance) this.activeEffects.remove(mobeffectlist);
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 0629c471d38a77c44fc1c86ccdfcb0690f61ca17..f1ae67d7093bdcdfd792ee9c520007cb55bad3f7 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -197,6 +197,10 @@ public abstract class Player extends LivingEntity {
     }
     // CraftBukkit end
 
+    // Papyrus start
+    public boolean unauthenticated = fr.thekinrar.papyrus.PapyrusConfig.hybridMode;
+    // Papyrus end
+
     public Player(Level world, BlockPos pos, float yaw, GameProfile gameProfile) {
         super(EntityType.PLAYER, world);
         this.lastItemInMainHand = ItemStack.EMPTY;
@@ -766,10 +770,7 @@ public abstract class Player extends LivingEntity {
             org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
             Item drop = (Item) entityitem.getBukkitEntity();
 
-            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
-            this.level.getCraftServer().getPluginManager().callEvent(event);
-
-            if (event.isCancelled()) {
+            if (hybridCall(new PlayerDropItemEvent(player, drop))) {
                 org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
                 if (flag1 && (cur == null || cur.getAmount() == 0)) {
                     // The complete stack was dropped
@@ -798,6 +799,15 @@ public abstract class Player extends LivingEntity {
         }
     }
 
+    public boolean hybridCall(org.bukkit.event.Event event) {
+        if (unauthenticated) {
+            return true;
+        }
+
+        this.level.getCraftServer().getPluginManager().callEvent(event);
+        return event instanceof org.bukkit.event.Cancellable && ((org.bukkit.event.Cancellable) event).isCancelled();
+    }
+
     public float getDestroySpeed(BlockState block) {
         float f = this.inventory.getDestroySpeed(block);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 8512be9a5eed640ad7a45980514104c23f2b9a19..7a5e7f8c49f6b509da4bbba06eb0e3269dffce80 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -15,6 +15,10 @@ import com.mojang.brigadier.tree.LiteralCommandNode;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.Lifecycle;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufOutputStream;
+import io.netty.buffer.Unpooled;
+import io.papermc.paper.configuration.GlobalConfiguration;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
@@ -479,6 +483,7 @@ public final class CraftServer implements Server {
             if (!io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins) this.loadCustomPermissions(); // Paper
             this.helpMap.initializeCommands();
             this.syncCommands();
+            fr.thekinrar.papyrus.PapyrusPermissions.registerPermissions(); // Papyrus
         }
     }
 
@@ -989,6 +994,7 @@ public final class CraftServer implements Server {
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
+        fr.thekinrar.papyrus.PapyrusConfig.registerCommands(); // Papyrus
 
         int pollCount = 0;
 
@@ -2920,4 +2926,24 @@ public final class CraftServer implements Server {
     }
 
     // Paper end
+
+    // Papyrus start
+    @Override
+    public boolean getHybridMode() {
+        if (fr.thekinrar.papyrus.PapyrusConfig.hybridMode) {
+            if (getOnlineMode()) {
+                getLogger().warning("Hybrid mode enabled but server is in online mode. Disabling hybrid mode.");
+                fr.thekinrar.papyrus.PapyrusConfig.hybridMode = false;
+            } else if (!org.spigotmc.SpigotConfig.bungee) {
+                getLogger().warning("Hybrid mode enabled but bungee support is disabled. Disabling hybrid mode.");
+                fr.thekinrar.papyrus.PapyrusConfig.hybridMode = false;
+            } else if (GlobalConfiguration.get().proxies.isProxyOnlineMode()) {
+                getLogger().warning("Hybrid mode enabled but bungee support is online mode. Disabling hybrid mode.");
+                fr.thekinrar.papyrus.PapyrusConfig.hybridMode = false;
+            }
+        }
+
+        return fr.thekinrar.papyrus.PapyrusConfig.hybridMode;
+    }
+    // Papyrus end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index d43859f8aa7beed82dd3a146bb1086982cd0cda7..ef3973ef599b2caee3d2fc8c8cc9c4dde225db95 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -456,7 +456,11 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     @Override
     public boolean addPotionEffect(PotionEffect effect, boolean force) {
         org.spigotmc.AsyncCatcher.catchOp("effect add"); // Paper
-        this.getHandle().addEffect(new MobEffectInstance(MobEffect.byId(effect.getType().getId()), effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles(), effect.hasIcon()), EntityPotionEffectEvent.Cause.PLUGIN); // Paper - Don't ignore icon
+        return addPotionEffect(effect, force, EntityPotionEffectEvent.Cause.PLUGIN);
+    }
+
+    public boolean addPotionEffect(PotionEffect effect, boolean force, EntityPotionEffectEvent.Cause cause) {
+        this.getHandle().addEffect(new MobEffectInstance(MobEffect.byId(effect.getType().getId()), effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles(), effect.hasIcon()), cause);
         return true;
     }
 
@@ -485,6 +489,10 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         this.getHandle().removeEffect(MobEffect.byId(type.getId()), EntityPotionEffectEvent.Cause.PLUGIN);
     }
 
+    public void removePotionEffect(PotionEffectType type, EntityPotionEffectEvent.Cause cause) {
+        this.getHandle().removeEffect(MobEffect.byId(type.getId()), cause);
+    }
+
     @Override
     public Collection<PotionEffect> getActivePotionEffects() {
         List<PotionEffect> effects = new ArrayList<PotionEffect>();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 7557fcfc4d4850c12ee77fd30914798e8e096565..0483cee8d4856ffecc4a08366b2957678e05e069 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -183,6 +183,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private long lastSaveTime;
     // Paper end
     private boolean canAlwaysOpenCommandBlocks = false; // Papyrus
+    private fr.thekinrar.papyrus.hybrid.HybridPlayer hybrid;
 
     public CraftPlayer(CraftServer server, ServerPlayer entity) {
         super(server, entity);
@@ -265,6 +266,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end - implement view distances
 
+    public fr.thekinrar.papyrus.hybrid.HybridPlayer getHybrid() {
+        return hybrid;
+    }
+
     public GameProfile getProfile() {
         return this.getHandle().getGameProfile();
     }
@@ -3118,6 +3123,17 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         net.minecraft.server.MinecraftServer.getServer().getPlayerList().sendPlayerPermissionLevel(getHandle());
     }
+
+    @Override
+    public boolean isAuthenticated() {
+        return !getHandle().unauthenticated;
+    }
+
+    public void initHybrid() {
+        if (hybrid == null) {
+            hybrid = new fr.thekinrar.papyrus.hybrid.HybridPlayer(this);
+        }
+    }
     // Papyrus end
 
     // Spigot start
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 819c9c020f4d5a1373f68850134960d24b8fc308..80efbe4f664796321fd2f8366b07b9982680fea4 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -559,7 +559,13 @@ public class CraftEventFactory {
             event.setUseItemInHand(Result.DENY);
         }
         // Paper end
-        craftServer.getPluginManager().callEvent(event);
+        // Papyrus start
+        if (who != null && who.unauthenticated) {
+            event.setCancelled(true);
+        } else {
+            craftServer.getPluginManager().callEvent(event);
+        }
+        // Papyrus end
 
         return event;
     }
