From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Sat, 5 Oct 2019 21:26:23 +0100
Subject: [PATCH] Implement CommandBlockEditEvent


diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 7d2ac8aa97805e8b022d3982b1332c5055fc8b90..04a77eda194256ed1ffd2a29f9d6216e772a0260 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -175,6 +175,8 @@ import net.minecraft.world.inventory.MerchantMenu;
 import net.minecraft.world.inventory.RecipeBookMenu;
 import net.minecraft.world.inventory.Slot;
 import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -185,6 +187,7 @@ import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.Action;
+import org.bukkit.event.block.CommandBlockEditEvent;
 import org.bukkit.event.block.SignChangeEvent;
 import org.bukkit.event.inventory.ClickType;
 import org.bukkit.event.inventory.CraftItemEvent;
@@ -214,8 +217,14 @@ import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.SmithingInventory;
 import org.bukkit.util.NumberConversions;
-import co.aikar.timings.MinecraftTimings; // Paper
-// CraftBukkit end
+
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.Optional;
+import java.util.Set;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener {
 
@@ -811,67 +820,119 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handleSetCommandBlock(ServerboundSetCommandBlockPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
-        if (!this.server.isCommandBlockEnabled()) {
+
+        BaseCommandBlock commandblocklistenerabstract = null;
+        CommandBlockEntity tileentitycommand = null;
+        BlockPos blockposition = packet.getPos();
+        BlockEntity tileentity = this.player.level.getBlockEntity(blockposition);
+
+        if (!(tileentity instanceof CommandBlockEntity))
+            return;
+
+        tileentitycommand = (CommandBlockEntity) tileentity;
+        commandblocklistenerabstract = tileentitycommand.getCommandBlock();
+
+        CommandBlockEntity.Mode tileentitycommand_type = tileentitycommand.getMode();
+
+        CommandBlockEditEvent event = new CommandBlockEditEvent(
+            CraftBlock.at(this.player.level, blockposition),
+            (Player) CraftPlayer.getEntity((CraftServer) org.bukkit.Bukkit.getServer(), this.player),
+
+            // Command
+            commandblocklistenerabstract.getCommand(),
+            packet.getCommand(),
+
+            // Type
+            commandBlockTypeFromNMS(tileentitycommand.getMode()),
+            commandBlockTypeFromNMS(packet.getMode()),
+
+            // Conditional
+            tileentitycommand.isConditional(),
+            packet.isConditional(),
+
+            // Needs redstone
+            !tileentitycommand.isAutomatic(),
+            !packet.isAutomatic(),
+
+            // Stores output
+            commandblocklistenerabstract.isTrackOutput(),
+            packet.isTrackOutput(),
+
+            this.server.isCommandBlockEnabled(),
+            this.player.canUseGameMasterBlocks() || (this.player.isCreative() && this.player.getBukkitEntity().hasPermission("minecraft.commandblock"))
+        );
+
+        org.bukkit.Bukkit.getServer().getPluginManager().callEvent(event);
+
+        if(event.isCancelled())
+            return;
+
+        if (!event.getCommandBlocksEnabled()) {
             this.player.sendMessage(new TranslatableComponent("advMode.notEnabled"), Util.NIL_UUID);
-        } else if (!this.player.canUseGameMasterBlocks() && !this.player.isCreative() && !this.player.getBukkitEntity().hasPermission("minecraft.commandblock")) { // Paper - command block permission
+        } else if (!event.getPlayerCanEdit()) {
             this.player.sendMessage(new TranslatableComponent("advMode.notAllowed"), Util.NIL_UUID);
         } else {
-            BaseCommandBlock commandblocklistenerabstract = null;
-            CommandBlockEntity tileentitycommand = null;
-            BlockPos blockposition = packet.getPos();
-            BlockEntity tileentity = this.player.level.getBlockEntity(blockposition);
+            Direction enumdirection = (Direction) this.player.level.getBlockState(blockposition).getValue(CommandBlock.FACING);
+            BlockState iblockdata;
 
-            if (tileentity instanceof CommandBlockEntity) {
-                tileentitycommand = (CommandBlockEntity) tileentity;
-                commandblocklistenerabstract = tileentitycommand.getCommandBlock();
+            switch (event.getNewType()) {
+                case CHAIN:
+                    iblockdata = Blocks.CHAIN_COMMAND_BLOCK.defaultBlockState();
+                    break;
+                case REPEAT:
+                    iblockdata = Blocks.REPEATING_COMMAND_BLOCK.defaultBlockState();
+                    break;
+                case IMPULSE:
+                default:
+                    iblockdata = Blocks.COMMAND_BLOCK.defaultBlockState();
             }
 
-            String s = packet.getCommand();
-            boolean flag = packet.isTrackOutput();
+            iblockdata.setValue(CommandBlock.FACING, enumdirection);
+            iblockdata.setValue(CommandBlock.CONDITIONAL, event.getNewConditional());
 
-            if (commandblocklistenerabstract != null) {
-                CommandBlockEntity.Mode tileentitycommand_type = tileentitycommand.getMode();
-                BlockState iblockdata = this.player.level.getBlockState(blockposition);
-                Direction enumdirection = (Direction) iblockdata.getValue(CommandBlock.FACING);
-                BlockState iblockdata1;
-
-                switch (packet.getMode()) {
-                    case SEQUENCE:
-                        iblockdata1 = Blocks.CHAIN_COMMAND_BLOCK.defaultBlockState();
-                        break;
-                    case AUTO:
-                        iblockdata1 = Blocks.REPEATING_COMMAND_BLOCK.defaultBlockState();
-                        break;
-                    case REDSTONE:
-                    default:
-                        iblockdata1 = Blocks.COMMAND_BLOCK.defaultBlockState();
-                }
-
-                BlockState iblockdata2 = (BlockState) ((BlockState) iblockdata1.setValue(CommandBlock.FACING, enumdirection)).setValue(CommandBlock.CONDITIONAL, packet.isConditional());
+            this.player.level.setBlock(blockposition, iblockdata, 2);
+            tileentity.setBlockState(iblockdata);
+            this.player.level.getChunkAt(blockposition).setBlockEntity(tileentity);
 
-                if (iblockdata2 != iblockdata) {
-                    this.player.level.setBlock(blockposition, iblockdata2, 2);
-                    tileentity.setBlockState(iblockdata2);
-                    this.player.level.getChunkAt(blockposition).setBlockEntity(tileentity);
-                }
-
-                commandblocklistenerabstract.setCommand(s);
-                commandblocklistenerabstract.setTrackOutput(flag);
-                if (!flag) {
-                    commandblocklistenerabstract.setLastOutput((Component) null);
-                }
+            commandblocklistenerabstract.setCommand(event.getNewCommand());
+            commandblocklistenerabstract.setTrackOutput(event.getNewStoresOutput());
+            if (!event.getNewStoresOutput()) {
+                commandblocklistenerabstract.setLastOutput((Component) null);
+            }
 
-                tileentitycommand.setAutomatic(packet.isAutomatic());
-                if (tileentitycommand_type != packet.getMode()) {
-                    tileentitycommand.onModeSwitch();
-                }
+            tileentitycommand.setAutomatic(!event.getNewNeedsRedstone());
+            if(tileentitycommand_type != commandBlockTypeToNMS(event.getNewType())) {
+                tileentitycommand.onModeSwitch();
+            }
 
-                commandblocklistenerabstract.onUpdated();
-                if (!StringUtil.isNullOrEmpty(s)) {
-                    this.player.sendMessage(new TranslatableComponent("advMode.setCommand.success", new Object[]{s}), Util.NIL_UUID);
-                }
+            commandblocklistenerabstract.onUpdated();
+            if (!StringUtil.isNullOrEmpty(event.getNewCommand())) {
+                this.player.sendMessage(new TranslatableComponent("advMode.setCommand.success", event.getNewCommand()), Util.NIL_UUID);
             }
+        }
+    }
+
+    private CommandBlockEditEvent.Type commandBlockTypeFromNMS(CommandBlockEntity.Mode nms) {
+        switch(nms) {
+            case SEQUENCE:
+                return CommandBlockEditEvent.Type.CHAIN;
+            case AUTO:
+                return CommandBlockEditEvent.Type.REPEAT;
+            case REDSTONE:
+            default:
+                return CommandBlockEditEvent.Type.IMPULSE;
+        }
+    }
 
+    private CommandBlockEntity.Mode commandBlockTypeToNMS(CommandBlockEditEvent.Type nms) {
+        switch(nms) {
+            case CHAIN:
+                return CommandBlockEntity.Mode.SEQUENCE;
+            case REPEAT:
+                return CommandBlockEntity.Mode.AUTO;
+            case IMPULSE:
+            default:
+                return CommandBlockEntity.Mode.REDSTONE;
         }
     }
 
