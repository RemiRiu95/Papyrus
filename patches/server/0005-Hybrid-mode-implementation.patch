From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Sun, 3 Nov 2019 16:08:17 +0000
Subject: [PATCH] Hybrid mode implementation


diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index b9cdbf8acccfd6b207a0116f068168f3b8c8e17d..36b67af3a4564069e9f2689a85f6c752839d623e 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -46,6 +46,8 @@ public final class MinecraftTimings {
     public static final Timing antiXrayUpdateTimer = Timings.ofSafe("anti-xray - update");
     public static final Timing antiXrayObfuscateTimer = Timings.ofSafe("anti-xray - obfuscate");
 
+    public static final Timing hybridEngineTimer = Timings.ofSafe("Hybrid Engine");
+
     private static final Map<Class<?>, String> taskNameCache = new MapMaker().weakKeys().makeMap();
 
     private MinecraftTimings() {}
diff --git a/src/main/java/fr/thekinrar/papyrus/Metrics.java b/src/main/java/fr/thekinrar/papyrus/Metrics.java
index 7c284c9b2ffd4145b6cffb73b1cfcc3b5c3fdaae..ff7346e595cbe2b63aa31886a4d521dc3283ad4c 100644
--- a/src/main/java/fr/thekinrar/papyrus/Metrics.java
+++ b/src/main/java/fr/thekinrar/papyrus/Metrics.java
@@ -593,7 +593,7 @@ public class Metrics {
                 }));
 
                 metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
-                metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
+                metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : (Bukkit.getHybridMode() ? "hybrid" : "offline")));
                 metrics.addCustomChart(new Metrics.SimplePie("papyrus_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown"));
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
diff --git a/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java b/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
index 4168eafc0d8893e9b677a5c4bde415b900cb8262..90d8a45b39c332565311db744ff72627aa61c7da 100644
--- a/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
+++ b/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
@@ -1,34 +1,24 @@
 package fr.thekinrar.papyrus;
 
-import co.aikar.timings.Timings;
-import co.aikar.timings.TimingsManager;
-import com.destroystokyo.paper.PaperCommand;
-import com.destroystokyo.paper.io.chunk.ChunkTaskManager;
-import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
-import com.google.common.collect.Lists;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
-import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
-import org.spigotmc.SpigotConfig;
-import org.spigotmc.WatchdogThread;
 
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.nio.charset.StandardCharsets;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
-import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class PapyrusConfig {
@@ -190,4 +180,9 @@ public class PapyrusConfig {
         config.addDefault(path, def);
         return config.getString(path, config.getString(path));
     }
+
+    public static boolean hybridMode = false;
+    private static void hybridMode() {
+        hybridMode = getBoolean("settings.hybrid-mode", false);
+    }
 }
diff --git a/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java b/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java
new file mode 100644
index 0000000000000000000000000000000000000000..8d1cd1c5c197e73f955563ec1312a7294e13649f
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java
@@ -0,0 +1,13 @@
+package fr.thekinrar.papyrus;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.util.permissions.DefaultPermissions;
+
+public final class PapyrusPermissions {
+    private static final String ROOT= "papyrus.command";
+
+    public static void registerPermissions() {
+        Permission parent = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all Papyrus commands");
+        parent.recalculatePermissibles();
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPlayer.java b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..9e689ecad1618108d6f9d3a9a3d15b738cb0c12e
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPlayer.java
@@ -0,0 +1,46 @@
+package fr.thekinrar.papyrus.hybrid;
+
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+
+public class HybridPlayer {
+
+    private final CraftPlayer player;
+    private final CraftServer server;
+
+    private int ticks = -1;
+
+    public HybridPlayer(CraftPlayer player) {
+        this.player = player;
+        this.server = player.getHandle().server.server;
+    }
+
+    public void tick() {
+        ++ticks;
+
+        if(ticks == 0) {
+            server.getHandle().sendAllPlayerInfo(player.getHandle());
+        }
+
+        if(ticks % 20 == 0)
+            addEffect(PotionEffectType.BLINDNESS, 0);
+    }
+
+    private void addEffect(PotionEffectType type, int amplifier) {
+        player.addPotionEffect(
+                new PotionEffect(type, 100, amplifier, false, false, false),
+                true,
+                EntityPotionEffectEvent.Cause.HYBRID_AUTH
+        );
+    }
+
+    public void clearEffects() {
+        player.removePotionEffect(PotionEffectType.BLINDNESS, EntityPotionEffectEvent.Cause.HYBRID_AUTH);
+
+        player.getHandle().lastSentExp = -1;
+        server.getHandle().sendAllPlayerInfo(player.getHandle());
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 4978648e40161ef45b2700481917d46fe142faff..9ebdf3120d467cb938936916a0cef149b0097790 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1496,6 +1496,18 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.profiler.popPush("levels");
         Iterator iterator = this.getAllLevels().iterator();
 
+        // Papyrus start
+        if(server.getHybridMode()) {
+            MinecraftTimings.hybridEngineTimer.startTiming();
+            for(ServerPlayer player : playerList.players) {
+                if(player.unauthenticated) {
+                    player.getBukkitEntity().getHybrid().tick();
+                }
+            }
+            MinecraftTimings.hybridEngineTimer.stopTiming();
+        }
+        // Papyrus end
+
         // CraftBukkit start
         // Run tasks that are waiting on processing
         MinecraftTimings.processQueueTimer.startTiming(); // Spigot
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 935b22199ebdf84db591f8442e0506d8fcc92e02..32911cbd6b3dbe18caeb599e4e1700bd0d2b3b1b 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -729,7 +729,12 @@ public class ServerPlayer extends Player {
 
             if (this.totalExperience != this.lastSentExp) {
                 this.lastSentExp = this.totalExperience;
+
+                if(this.unauthenticated) {
+                this.connection.send(new ClientboundSetExperiencePacket(0, 0, 0));
+                } else {
                 this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
+                }
             }
 
             if (this.tickCount % 20 == 0) {
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 82e536ee00a7fa4ec88ff4b1deebb91901c315c6..0a9a9ca6c26fa0ab7a95e3a5698279ed5365faed 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1376,6 +1376,13 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
                             }
                             // Paper end
 
+                            // Papyrus start - Hybrid mode
+                            if(player.unauthenticated) {
+                                this.teleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot());
+                                return;
+                            }
+                            // Papyrus end
+
                             if (!this.player.isChangingDimension() && (!this.player.getLevel().getGameRules().getBoolean(GameRules.RULE_DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isFallFlying())) {
                                 float f2 = this.player.isFallFlying() ? 300.0F : 100.0F;
 
@@ -1662,6 +1669,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
 
         switch (packetplayinblockdig_enumplayerdigtype) {
             case SWAP_ITEM_WITH_OFFHAND:
+                if(player.unauthenticated) return; // Papyrus
+
                 if (!this.player.isSpectator()) {
                     ItemStack itemstack = this.player.getItemInHand(InteractionHand.OFF_HAND);
 
@@ -1689,6 +1698,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
 
                 return;
             case DROP_ITEM:
+                if(player.unauthenticated) return; // Papyrus
+
                 if (!this.player.isSpectator()) {
                     // limit how quickly items can be dropped
                     // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
@@ -1710,12 +1721,16 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
 
                 return;
             case DROP_ALL_ITEMS:
+                if(player.unauthenticated) return; // Papyrus
+
                 if (!this.player.isSpectator()) {
                     this.player.drop(true);
                 }
 
                 return;
             case RELEASE_USE_ITEM:
+                if(player.unauthenticated) return; // Papyrus
+
                 this.player.releaseUsingItem();
                 return;
             case START_DESTROY_BLOCK:
@@ -2042,6 +2057,10 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
 
             // CraftBukkit start
             boolean isSync = s.startsWith("/");
+            if(player.unauthenticated && !isSync) {
+                ServerGamePacketListenerImpl.LOGGER.warn(this.player.getScoreboardName() + " tried chatting while unauthenticated: " + s);
+                return;
+            }
             if (isSync) {
                 try {
                     this.server.server.playerCommandState = true;
@@ -3090,6 +3109,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     // CraftBukkit start
     private static final ResourceLocation CUSTOM_REGISTER = new ResourceLocation("register");
     private static final ResourceLocation CUSTOM_UNREGISTER = new ResourceLocation("unregister");
+    private static final ResourceLocation CUSTOM_HYBRID = new ResourceLocation("bungeecord:hybrid");
 
     private static final ResourceLocation MINECRAFT_BRAND = new ResourceLocation("brand"); // Paper - Brand support
 
@@ -3116,6 +3136,18 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
                 ServerGamePacketListenerImpl.LOGGER.error("Couldn\'t unregister custom payload", ex);
                 this.disconnect("Invalid payload UNREGISTER!", org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_PAYLOAD); // Paper - kick event cause
             }
+        } else if (packet.identifier.equals(CUSTOM_HYBRID)) {
+            try {
+                String[] data = packet.data.toString(java.nio.charset.StandardCharsets.UTF_8).split("\0");
+                if("authenticate".equals(data[0])) {
+                    player.unauthenticated = false;
+                    player.getBukkitEntity().getHybrid().clearEffects();
+                } else {
+                    throw new IllegalArgumentException("Unknown subchannel: " + data[0]);
+                }
+            } catch (Exception ex) {
+                ServerGamePacketListenerImpl.LOGGER.error("Couldn't process hybrid custom payload", ex);
+            }
         } else {
             try {
                 byte[] data = new byte[packet.data.readableBytes()];
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index ab393f07ee5339d4794fbee2c8c50f777d0edf45..32fa86349dbe3bfe2f65cb28c00e132666b3b9eb 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -230,6 +230,12 @@ public abstract class PlayerList {
 
         if (nbttagcompound == null) player.fudgeSpawnLocation(worldserver1); // Paper - only move to spawn on first login, otherwise, stay where you are....
 
+        // Papyrus start
+        if(cserver.getHybridMode()) {
+            player.getBukkitEntity().initHybrid();
+        }
+        // Papyrus end
+
         player.setLevel(worldserver1);
         String s1 = "local";
 
@@ -272,7 +278,7 @@ public abstract class PlayerList {
         playerconnection.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
         playerconnection.send(new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes()));
         playerconnection.send(new ClientboundUpdateTagsPacket(this.server.getTags().serializeToNetwork((RegistryAccess) this.registryHolder)));
-        playerconnection.send(new ClientboundEntityEventPacket(player, (byte) (worldserver1.getGameRules().getBoolean(GameRules.RULE_REDUCEDDEBUGINFO) ? 22 : 23))); // Paper - fix this rule not being initialized on the client
+        playerconnection.send(new ClientboundEntityEventPacket(player, (byte) (hasReducedDebugInfo(player) ? 22 : 23))); // Paper - fix this rule not being initialized on the client
         this.sendPlayerPermissionLevel(player);
         player.getStats().markAllDirty();
         player.getRecipeBook().sendInitialRecipeBook(player);
@@ -1300,18 +1306,32 @@ public abstract class PlayerList {
     }
 
     public void sendAllPlayerInfo(ServerPlayer player) {
-        player.inventoryMenu.sendAllDataToRemote();
+        // Papyrus start
+        if(player.unauthenticated)
+            new net.minecraft.world.inventory.InventoryMenu(new net.minecraft.world.entity.player.Inventory(player), true, player).sendAllDataToRemote();
+        else // Papyrus end
+            player.inventoryMenu.sendAllDataToRemote();
         // entityplayer.triggerHealthUpdate();
         player.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
         player.connection.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
         // CraftBukkit start - from GameRules
-        int i = player.level.getGameRules().getBoolean(GameRules.RULE_REDUCEDDEBUGINFO) ? 22 : 23;
-        player.connection.send(new ClientboundEntityEventPacket(player, (byte) i));
-        float immediateRespawn = player.level.getGameRules().getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN) ? 1.0F: 0.0F;
+        updateReducedDebugInfo(player); // Papyrus
+        float immediateRespawn = player.level.getGameRules().getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN) ? 1.0F : 0.0F;
         player.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.IMMEDIATE_RESPAWN, immediateRespawn));
         // CraftBukkit end
     }
 
+    // Papyrus start
+    public void updateReducedDebugInfo(ServerPlayer player) {
+        int i = hasReducedDebugInfo(player) ? 22 : 23;
+        player.connection.send(new ClientboundEntityEventPacket(player, (byte) i));
+    }
+    // Papyrus end
+
+    private boolean hasReducedDebugInfo(ServerPlayer player) {
+        return player.level.getGameRules().getBoolean(GameRules.RULE_REDUCEDDEBUGINFO) || player.unauthenticated;
+    }
+
     public int getPlayerCount() {
         return this.players.size();
     }
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 57c448ee93df76fc2a17c75fafc78408d720ced3..abfeb86c79146b42a9ea84209ce99ed85cc3d195 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -1107,9 +1107,12 @@ public abstract class LivingEntity extends Entity {
                 override = new MobEffectInstance(mobeffect1).update(mobeffect);
             }
 
-            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect1, mobeffect, cause, override);
-            if (event.isCancelled()) {
-                return false;
+            if(!cause.equals(EntityPotionEffectEvent.Cause.HYBRID_AUTH)) { // Papyrus
+                EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect1, mobeffect, cause, override);
+                if (event.isCancelled()) {
+                    return false;
+                }
+                override = event.isOverride(); // Papyrus - see below
             }
             // CraftBukkit end
 
@@ -1118,7 +1121,7 @@ public abstract class LivingEntity extends Entity {
                 this.onEffectAdded(mobeffect, entity);
                 return true;
                 // CraftBukkit start
-            } else if (event.isOverride()) {
+            } else if (override) { // Papyrus - read override directly
                 mobeffect1.update(mobeffect);
                 this.onEffectUpdated(mobeffect1, true, entity);
                 // CraftBukkit end
@@ -1176,9 +1179,11 @@ public abstract class LivingEntity extends Entity {
             return null;
         }
 
-        EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
-        if (event.isCancelled()) {
-            return null;
+        if(!cause.equals(EntityPotionEffectEvent.Cause.HYBRID_AUTH)) {
+            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
+            if (event.isCancelled()) {
+                return null;
+            }
         }
 
         return (MobEffectInstance) this.activeEffects.remove(mobeffectlist);
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 1bccd932851045c374e3092d33dc77fab680d0db..b5451faf06b17d64ba64e69ea1689549cc3e489e 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -193,6 +193,10 @@ public abstract class Player extends LivingEntity {
     }
     // CraftBukkit end
 
+    // Papyrus start
+    public boolean unauthenticated = fr.thekinrar.papyrus.PapyrusConfig.hybridMode;
+    // Papyrus end
+
     public Player(Level world, BlockPos pos, float yaw, GameProfile profile) {
         super(EntityType.PLAYER, world);
         this.lastItemInMainHand = ItemStack.EMPTY;
@@ -744,10 +748,7 @@ public abstract class Player extends LivingEntity {
             org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
             Item drop = (Item) entityitem.getBukkitEntity();
 
-            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
-            this.level.getCraftServer().getPluginManager().callEvent(event);
-
-            if (event.isCancelled() && !alwaysSucceed) { // Paper - Fix duplicating /give items on item drop cancel
+            if (hybridCall(new PlayerDropItemEvent(player, drop)) && !alwaysSucceed) { // Paper - Fix duplicating /give items on item drop cancel
                 org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
                 if (retainOwnership && (cur == null || cur.getAmount() == 0)) {
                     // The complete stack was dropped
@@ -774,6 +775,14 @@ public abstract class Player extends LivingEntity {
         }
     }
 
+    public boolean hybridCall(org.bukkit.event.Event event) {
+        if(unauthenticated)
+            return true;
+
+        this.level.getCraftServer().getPluginManager().callEvent(event);
+        return event instanceof org.bukkit.event.Cancellable && ((org.bukkit.event.Cancellable) event).isCancelled();
+    }
+
     public float getDestroySpeed(BlockState block) {
         float f = this.inventory.getDestroySpeed(block);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 9ce862102158626f777241744cd44230b2a4a71b..e9d0eaeb4543baac2b06bf2e04ddda4f9fb62c87 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -442,9 +442,7 @@ public final class CraftServer implements Server {
             this.commandMap.registerServerAliases();
             DefaultPermissions.registerCorePermissions();
             CraftDefaultPermissions.registerCorePermissions();
-            if (!com.destroystokyo.paper.PaperConfig.loadPermsBeforePlugins) this.loadCustomPermissions(); // Paper
-            this.helpMap.initializeCommands();
-            this.syncCommands();
+            fr.thekinrar.papyrus.PapyrusPermissions.registerPermissions(); // Papyrus
         }
     }
 
@@ -925,8 +923,7 @@ public final class CraftServer implements Server {
         this.reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
-        this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
-        this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
+        fr.thekinrar.papyrus.PapyrusConfig.registerCommands(); // Papyrus
 
         int pollCount = 0;
 
@@ -2519,4 +2516,24 @@ public final class CraftServer implements Server {
     }
 
     // Paper end
+
+    // Papyrus start
+    @Override
+    public boolean getHybridMode() {
+        if (fr.thekinrar.papyrus.PapyrusConfig.hybridMode) {
+            if (getOnlineMode()) {
+                getLogger().warning("Hybrid mode enabled but server is in online mode. Disabling hybrid mode.");
+                fr.thekinrar.papyrus.PapyrusConfig.hybridMode = false;
+            } else if(!org.spigotmc.SpigotConfig.bungee) {
+                getLogger().warning("Hybrid mode enabled but bungee support is disabled. Disabling hybrid mode.");
+                fr.thekinrar.papyrus.PapyrusConfig.hybridMode = false;
+            } else if(com.destroystokyo.paper.PaperConfig.bungeeOnlineMode) {
+                getLogger().warning("Hybrid mode enabled but bungee support is online mode. Disabling hybrid mode.");
+                fr.thekinrar.papyrus.PapyrusConfig.hybridMode = false;
+            }
+        }
+
+        return fr.thekinrar.papyrus.PapyrusConfig.hybridMode;
+    }
+    // Papyrus end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 53b61b609361c305fb8d1f1a8700e81ce139fde4..f446aca778f1000674720c8609211cd93c2685e4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -403,7 +403,17 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     @Override
     public boolean addPotionEffect(PotionEffect effect, boolean force) {
-        this.getHandle().addEffect(new MobEffectInstance(MobEffect.byId(effect.getType().getId()), effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles(), effect.hasIcon()), EntityPotionEffectEvent.Cause.PLUGIN); // Paper - Don't ignore icon
+        return addPotionEffect(effect, force, EntityPotionEffectEvent.Cause.PLUGIN);
+    }
+
+    public boolean addPotionEffect(PotionEffect effect, boolean force, EntityPotionEffectEvent.Cause cause) {
+        if (hasPotionEffect(effect.getType())) {
+            if (!force) {
+                return false;
+            }
+            removePotionEffect(effect.getType());
+        }
+        this.getHandle().addEffect(new MobEffectInstance(MobEffect.byId(effect.getType().getId()), effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles(), effect.hasIcon()), cause);
         return true;
     }
 
@@ -432,6 +442,10 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         this.getHandle().removeEffect(MobEffect.byId(type.getId()), EntityPotionEffectEvent.Cause.PLUGIN);
     }
 
+    public void removePotionEffect(PotionEffectType type, EntityPotionEffectEvent.Cause cause) {
+        this.getHandle().removeEffect(MobEffect.byId(type.getId()), cause);
+    }
+
     @Override
     public Collection<PotionEffect> getActivePotionEffects() {
         List<PotionEffect> effects = new ArrayList<PotionEffect>();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 7cf40184b42b1ad53428b26ba45b05764b3770b0..b5472615a46d91ae2f91fe3be4715d0a7fcb7e23 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -153,6 +153,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private long lastSaveTime;
     // Paper end
     private boolean canAlwaysOpenCommandBlocks = false; // Papyrus
+    private fr.thekinrar.papyrus.hybrid.HybridPlayer hybrid;
 
     public CraftPlayer(CraftServer server, ServerPlayer entity) {
         super(server, entity);
@@ -160,6 +161,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.firstPlayed = System.currentTimeMillis();
     }
 
+    public fr.thekinrar.papyrus.hybrid.HybridPlayer getHybrid() {
+        return hybrid;
+    }
+
     public GameProfile getProfile() {
         return this.getHandle().getGameProfile();
     }
@@ -2372,6 +2377,17 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         net.minecraft.server.MinecraftServer.getServer().getPlayerList().sendPlayerPermissionLevel(getHandle());
     }
+
+    @Override
+    public boolean isAuthenticated() {
+        return !getHandle().unauthenticated;
+    }
+
+    public void initHybrid() {
+        if(hybrid == null) {
+            hybrid = new fr.thekinrar.papyrus.hybrid.HybridPlayer(this);
+        }
+    }
     // Papyrus end
 
     // Spigot start
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index a59a449c0a7b76527f009031aee2d11d6b43cadf..cb1d42b5ee4c4fb4ee07b18cbdb41d078c01c6d3 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -535,7 +535,12 @@ public class CraftEventFactory {
         if (cancelledBlock) {
             event.setUseInteractedBlock(Event.Result.DENY);
         }
-        craftServer.getPluginManager().callEvent(event);
+
+        if(who != null && who.unauthenticated) {
+            event.setCancelled(true);
+        } else {
+            craftServer.getPluginManager().callEvent(event);
+        }
 
         return event;
     }
