From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Remi <remi.riu95@gmail.com>
Date: Sat, 5 Nov 2022 01:02:38 +0100
Subject: [PATCH] Implementation de CommandBlockEditEvent


diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 57a62a5d6e05b6e05214b5aef96c5f2411e9f424..b10c0ac8d416a044e633b4aa2d685b0ff0e79bd3 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -182,6 +182,7 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.event.block.CommandBlockEditEvent;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -938,67 +939,119 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @Override
     public void handleSetCommandBlock(ServerboundSetCommandBlockPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
-        if (!this.server.isCommandBlockEnabled()) {
+        BaseCommandBlock commandblocklistenerabstract = null;
+        CommandBlockEntity tileentitycommand = null;
+        BlockPos blockposition = packet.getPos();
+        BlockEntity tileentity = this.player.level.getBlockEntity(blockposition);
+
+        if (!(tileentity instanceof CommandBlockEntity)) {
+            return;
+        }
+
+        tileentitycommand = (CommandBlockEntity) tileentity;
+        commandblocklistenerabstract = tileentitycommand.getCommandBlock();
+        CommandBlockEntity.Mode tileentitycommand_type = tileentitycommand.getMode();
+
+        var event = new org.bukkit.event.block.CommandBlockEditEvent(
+            org.bukkit.craftbukkit.block.CraftBlock.at(this.player.level, blockposition),
+            (Player) CraftPlayer.getEntity((org.bukkit.craftbukkit.CraftServer) org.bukkit.Bukkit.getServer(), this.player),
+
+            // Command
+            commandblocklistenerabstract.getCommand(),
+            packet.getCommand(),
+
+            // Type
+            commandBlockTypeFromNMS(tileentitycommand.getMode()),
+            commandBlockTypeFromNMS(packet.getMode()),
+
+            // Conditional
+            tileentitycommand.isConditional(),
+            packet.isConditional(),
+
+            // Needs redstone
+            !tileentitycommand.isAutomatic(),
+            !packet.isAutomatic(),
+
+            // Stores output
+            commandblocklistenerabstract.isTrackOutput(),
+            packet.isTrackOutput(),
+
+            this.server.isCommandBlockEnabled(),
+            this.player.canUseGameMasterBlocks() || (this.player.isCreative() && this.player.getBukkitEntity().hasPermission("minecraft.commandblock"))
+        );
+
+        org.bukkit.Bukkit.getServer().getPluginManager().callEvent(event);
+
+        if(event.isCancelled()) {
+            return;
+        }
+
+        if (!event.getCommandBlocksEnabled()) {
             this.player.sendSystemMessage(Component.translatable("advMode.notEnabled"));
-        } else if (!this.player.canUseGameMasterBlocks() && (!this.player.isCreative() || !this.player.getBukkitEntity().hasPermission("minecraft.commandblock"))) { // Paper - command block permission
+        } else if (!event.getPlayerCanEdit()) {
             this.player.sendSystemMessage(Component.translatable("advMode.notAllowed"));
         } else {
-            BaseCommandBlock commandblocklistenerabstract = null;
-            CommandBlockEntity tileentitycommand = null;
-            BlockPos blockposition = packet.getPos();
-            BlockEntity tileentity = this.player.level.getBlockEntity(blockposition);
+            Direction enumdirection = (Direction) this.player.level.getBlockState(blockposition).getValue(CommandBlock.FACING);
+            BlockState iblockdata;
 
-            if (tileentity instanceof CommandBlockEntity) {
-                tileentitycommand = (CommandBlockEntity) tileentity;
-                commandblocklistenerabstract = tileentitycommand.getCommandBlock();
+            switch (event.getNewType()) {
+                case CHAIN:
+                    iblockdata = Blocks.CHAIN_COMMAND_BLOCK.defaultBlockState();
+                    break;
+                case REPEAT:
+                    iblockdata = Blocks.REPEATING_COMMAND_BLOCK.defaultBlockState();
+                    break;
+                case IMPULSE:
+                default:
+                    iblockdata = Blocks.COMMAND_BLOCK.defaultBlockState();
             }
 
-            String s = packet.getCommand();
-            boolean flag = packet.isTrackOutput();
-
-            if (commandblocklistenerabstract != null) {
-                CommandBlockEntity.Mode tileentitycommand_type = tileentitycommand.getMode();
-                BlockState iblockdata = this.player.level.getBlockState(blockposition);
-                Direction enumdirection = (Direction) iblockdata.getValue(CommandBlock.FACING);
-                BlockState iblockdata1;
-
-                switch (packet.getMode()) {
-                    case SEQUENCE:
-                        iblockdata1 = Blocks.CHAIN_COMMAND_BLOCK.defaultBlockState();
-                        break;
-                    case AUTO:
-                        iblockdata1 = Blocks.REPEATING_COMMAND_BLOCK.defaultBlockState();
-                        break;
-                    case REDSTONE:
-                    default:
-                        iblockdata1 = Blocks.COMMAND_BLOCK.defaultBlockState();
-                }
+            iblockdata.setValue(CommandBlock.FACING, enumdirection);
+            iblockdata.setValue(CommandBlock.CONDITIONAL, event.getNewConditional());
 
-                BlockState iblockdata2 = (BlockState) ((BlockState) iblockdata1.setValue(CommandBlock.FACING, enumdirection)).setValue(CommandBlock.CONDITIONAL, packet.isConditional());
+            this.player.level.setBlock(blockposition, iblockdata, 2);
+            tileentity.setBlockState(iblockdata);
+            this.player.level.getChunkAt(blockposition).setBlockEntity(tileentity);
 
-                if (iblockdata2 != iblockdata) {
-                    this.player.level.setBlock(blockposition, iblockdata2, 2);
-                    tileentity.setBlockState(iblockdata2);
-                    this.player.level.getChunkAt(blockposition).setBlockEntity(tileentity);
-                }
-
-                commandblocklistenerabstract.setCommand(s);
-                commandblocklistenerabstract.setTrackOutput(flag);
-                if (!flag) {
-                    commandblocklistenerabstract.setLastOutput((Component) null);
-                }
+            commandblocklistenerabstract.setCommand(event.getNewCommand());
+            commandblocklistenerabstract.setTrackOutput(event.getNewStoresOutput());
+            if (!event.getNewStoresOutput()) {
+                commandblocklistenerabstract.setLastOutput(null);
+            }
 
-                tileentitycommand.setAutomatic(packet.isAutomatic());
-                if (tileentitycommand_type != packet.getMode()) {
-                    tileentitycommand.onModeSwitch();
-                }
+            tileentitycommand.setAutomatic(!event.getNewNeedsRedstone());
+            if (tileentitycommand_type != commandBlockTypeToNMS(event.getNewType())) {
+                tileentitycommand.onModeSwitch();
+            }
 
-                commandblocklistenerabstract.onUpdated();
-                if (!StringUtil.isNullOrEmpty(s)) {
-                    this.player.sendSystemMessage(Component.translatable("advMode.setCommand.success", s));
-                }
+            commandblocklistenerabstract.onUpdated();
+            if (!StringUtil.isNullOrEmpty(event.getNewCommand())) {
+                this.player.sendSystemMessage(Component.translatable("advMode.setCommand.success", event.getNewCommand()));
             }
+        }
+    }
 
+    private org.bukkit.event.block.CommandBlockEditEvent.Type commandBlockTypeFromNMS(CommandBlockEntity.Mode nms) {
+        switch (nms) {
+            case SEQUENCE:
+                return org.bukkit.event.block.CommandBlockEditEvent.Type.CHAIN;
+            case AUTO:
+                return org.bukkit.event.block.CommandBlockEditEvent.Type.REPEAT;
+            case REDSTONE:
+            default:
+                return org.bukkit.event.block.CommandBlockEditEvent.Type.IMPULSE;
+        }
+    }
+
+    private CommandBlockEntity.Mode commandBlockTypeToNMS(org.bukkit.event.block.CommandBlockEditEvent.Type nms) {
+        switch (nms) {
+            case CHAIN:
+                return CommandBlockEntity.Mode.SEQUENCE;
+            case REPEAT:
+                return CommandBlockEntity.Mode.AUTO;
+            case IMPULSE:
+            default:
+                return CommandBlockEntity.Mode.REDSTONE;
         }
     }
 
