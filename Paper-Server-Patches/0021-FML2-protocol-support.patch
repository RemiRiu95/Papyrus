From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Fri, 6 Nov 2020 20:09:13 +0100
Subject: [PATCH] FML2 protocol support


diff --git a/src/main/java/net/minecraft/network/NetworkManager.java b/src/main/java/net/minecraft/network/NetworkManager.java
index babe02b782bacf7078ab2918557b3dd89af0f353..b339f996bd512519746218b3dfd2bc3cb0d63a08 100644
--- a/src/main/java/net/minecraft/network/NetworkManager.java
+++ b/src/main/java/net/minecraft/network/NetworkManager.java
@@ -83,6 +83,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     // Paper start - NetworkClient implementation
     public int protocolVersion;
     public java.net.InetSocketAddress virtualHost;
+    public boolean forge = false;
     private static boolean enableExplicitFlush = Boolean.getBoolean("paper.explicit-flush");
     // Optimize network
     public boolean isPending = true;
diff --git a/src/main/java/net/minecraft/network/PacketDataSerializer.java b/src/main/java/net/minecraft/network/PacketDataSerializer.java
index 579eb1260c7266cd41025cff177de4fb00ac0cec..d0cc5387afc4aa3b9d61bb0c4b38a43a68f497eb 100644
--- a/src/main/java/net/minecraft/network/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/network/PacketDataSerializer.java
@@ -238,6 +238,7 @@ public class PacketDataSerializer extends ByteBuf {
         return new UUID(this.readLong(), this.readLong());
     }
 
+    public PacketDataSerializer writeVarInt(int i) { return d(i); } // Papyrus - OBFHELPER
     public PacketDataSerializer d(int i) {
         while ((i & -128) != 0) {
             this.writeByte(i & 127 | 128);
@@ -361,6 +362,7 @@ public class PacketDataSerializer extends ByteBuf {
         }
     }
 
+    public String readString() { return readUTF(32767); }
     public String readUTF(int maxLength) { return this.e(maxLength); } // Paper - OBFHELPER
     public String e(int i) {
         int j = this.i();
@@ -381,6 +383,7 @@ public class PacketDataSerializer extends ByteBuf {
         }
     }
 
+    public PacketDataSerializer writeString(String s) { return a(s); } // Papyrus - OBFHELPER
     public PacketDataSerializer a(String s) {
         return this.a(s, 32767);
     }
diff --git a/src/main/java/net/minecraft/network/protocol/status/ServerPing.java b/src/main/java/net/minecraft/network/protocol/status/ServerPing.java
index b9e36a83837913cd3e5abe598f695ba7a9ffc417..cfc02997663917ddd4afd1b1d6775189a73a750a 100644
--- a/src/main/java/net/minecraft/network/protocol/status/ServerPing.java
+++ b/src/main/java/net/minecraft/network/protocol/status/ServerPing.java
@@ -9,6 +9,8 @@ import com.google.gson.JsonParseException;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
 import com.mojang.authlib.GameProfile;
+import org.bukkit.Bukkit;
+
 import java.lang.reflect.Type;
 import java.util.UUID;
 import net.minecraft.network.chat.IChatBaseComponent;
@@ -102,6 +104,25 @@ public class ServerPing {
                 jsonobject.addProperty("favicon", serverping.d());
             }
 
+            JsonObject forge = new JsonObject();
+            forge.addProperty("modId", "forge");
+            forge.addProperty("modmarker", "ANY");
+
+            JsonObject mc = new JsonObject();
+            mc.addProperty("modId", "minecraft");
+            mc.addProperty("modmarker", Bukkit.getMinecraftVersion());
+
+            JsonArray forgeMods = new JsonArray();
+            forgeMods.add(mc);
+            forgeMods.add(forge);
+
+            JsonObject forgeData = new JsonObject();
+            forgeData.add("channels", new JsonArray());
+            forgeData.add("mods", forgeMods);
+            forgeData.addProperty("fmlNetworkVersion", 2);
+
+            jsonobject.add("forgeData", forgeData);
+
             return jsonobject;
         }
     }
diff --git a/src/main/java/net/minecraft/server/network/HandshakeListener.java b/src/main/java/net/minecraft/server/network/HandshakeListener.java
index 423696df365ceb20b673a87714b753d7b3b7a3af..24a820c5757b263e4edae544650466beb30e341f 100644
--- a/src/main/java/net/minecraft/server/network/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/network/HandshakeListener.java
@@ -160,6 +160,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
         // Paper start - NetworkClient implementation
         this.getNetworkManager().protocolVersion = packethandshakinginsetprotocol.getProtocolVersion();
         this.getNetworkManager().virtualHost = com.destroystokyo.paper.network.PaperNetworkClient.prepareVirtualHost(packethandshakinginsetprotocol.hostname, packethandshakinginsetprotocol.port);
+        this.getNetworkManager().forge = packethandshakinginsetprotocol.hostname.endsWith("\0FML2\0");
         // Paper end
     }
 
diff --git a/src/main/java/net/minecraft/server/network/LoginListener.java b/src/main/java/net/minecraft/server/network/LoginListener.java
index 185667110cd6f566b23546728d20fc79223f3c92..490726a96cf579f5738d85cfe26fb48501008ec0 100644
--- a/src/main/java/net/minecraft/server/network/LoginListener.java
+++ b/src/main/java/net/minecraft/server/network/LoginListener.java
@@ -9,7 +9,10 @@ import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.security.PrivateKey;
+import java.text.MessageFormat;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
 import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -30,6 +33,7 @@ import net.minecraft.network.protocol.login.PacketLoginOutDisconnect;
 import net.minecraft.network.protocol.login.PacketLoginOutEncryptionBegin;
 import net.minecraft.network.protocol.login.PacketLoginOutSetCompression;
 import net.minecraft.network.protocol.login.PacketLoginOutSuccess;
+import net.minecraft.resources.MinecraftKey;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.EntityPlayer;
 import net.minecraft.util.CryptographyException;
@@ -65,6 +69,7 @@ public class LoginListener implements PacketLoginInListener {
     private EntityPlayer l;
     public String hostname = ""; // CraftBukkit - add field
     private int velocityLoginMessageId = -1; // Paper - Velocity support
+    private boolean forgeSent;
 
     public LoginListener(MinecraftServer minecraftserver, NetworkManager networkmanager) {
         this.g = LoginListener.EnumProtocolState.HELLO;
@@ -81,7 +86,32 @@ public class LoginListener implements PacketLoginInListener {
             return;
         }
         // Paper end
-        if (this.g == LoginListener.EnumProtocolState.READY_TO_ACCEPT) {
+        if(this.g == EnumProtocolState.NEGOTIATING) {
+            if(networkManager.forge) {
+                if(!forgeSent) {
+                    forgeSent = true;
+
+                    LOGGER.info("{} is a FML2 client, initiating handshake", this.getGameProfile()::getName);
+
+                    PacketDataSerializer packet = new PacketDataSerializer(Unpooled.buffer());
+                    packet.writeVarInt(0x01);
+                    packet.writeVarInt(2);
+                    packet.writeString("minecraft");
+                    packet.writeString("forge");
+                    packet.writeVarInt(0);
+                    packet.writeVarInt(0);
+
+                    PacketDataSerializer handshake = new PacketDataSerializer(Unpooled.buffer());
+                    handshake.a(new MinecraftKey("fml", "handshake"));
+                    handshake.writeVarInt(packet.readableBytes());
+                    handshake.writeBytes(packet);
+
+                    this.networkManager.sendPacket(new PacketLoginOutCustomPayload(424242, new MinecraftKey("fml", "loginwrapper"), handshake));
+                }
+            } else {
+                this.g = EnumProtocolState.READY_TO_ACCEPT;
+            }
+        } else if (this.g == LoginListener.EnumProtocolState.READY_TO_ACCEPT) {
             // Paper start - prevent logins to be processed even though disconnect was called
             if (networkManager.isConnected()) {
                 this.c();
@@ -150,6 +180,9 @@ public class LoginListener implements PacketLoginInListener {
         {
             for ( com.mojang.authlib.properties.Property property : networkManager.spoofedProfile )
             {
+                if("forge".equals(property.getName()) && "true".equals(property.getValue())) {
+                    networkManager.forge = true;
+                }
                 this.i.getProperties().put( property.getName(), property );
             }
         }
@@ -205,6 +238,7 @@ public class LoginListener implements PacketLoginInListener {
     public void a(PacketLoginInStart packetlogininstart) {
         Validate.validState(this.g == LoginListener.EnumProtocolState.HELLO, "Unexpected hello packet", new Object[0]);
         this.i = packetlogininstart.b();
+
         if (this.server.getOnlineMode() && !this.networkManager.isLocal()) {
             this.g = LoginListener.EnumProtocolState.KEY;
             this.networkManager.sendPacket(new PacketLoginOutEncryptionBegin("", this.server.getKeyPair().getPublic().getEncoded(), this.e));
@@ -234,7 +268,6 @@ public class LoginListener implements PacketLoginInListener {
             // Paper end
             // Spigot end
         }
-
     }
 
     @Override
@@ -277,7 +310,7 @@ public class LoginListener implements PacketLoginInListener {
                     } else if (LoginListener.this.server.isEmbeddedServer()) {
                         LoginListener.LOGGER.warn("Failed to verify username but will let them in anyway!");
                         LoginListener.this.i = LoginListener.this.a(gameprofile);
-                        LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                        LoginListener.this.g = LoginListener.EnumProtocolState.NEGOTIATING;
                     } else {
                         LoginListener.this.disconnect(new ChatMessage("multiplayer.disconnect.unverified_username"));
                         LoginListener.LOGGER.error("Username '{}' tried to join with an invalid session", gameprofile.getName());
@@ -286,7 +319,7 @@ public class LoginListener implements PacketLoginInListener {
                     if (LoginListener.this.server.isEmbeddedServer()) {
                         LoginListener.LOGGER.warn("Authentication servers are down but will let them in anyway!");
                         LoginListener.this.i = LoginListener.this.a(gameprofile);
-                        LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                        LoginListener.this.g = LoginListener.EnumProtocolState.NEGOTIATING;
                     } else {
                             // Paper start
                             if (com.destroystokyo.paper.PaperConfig.authenticationServersDownKickMessage != null) {
@@ -365,12 +398,32 @@ public class LoginListener implements PacketLoginInListener {
                         }
                         // CraftBukkit end
                         LoginListener.LOGGER.info("UUID of player {} is {}", LoginListener.this.i.getName(), LoginListener.this.i.getId());
-                        LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                        LoginListener.this.g = LoginListener.EnumProtocolState.NEGOTIATING;
         }
     }
     // Spigot end
 
     public void a(PacketLoginInCustomPayload packetloginincustompayload) {
+        if(this.g == EnumProtocolState.NEGOTIATING && packetloginincustompayload.getId() == 424242) {
+            PacketDataSerializer buf = packetloginincustompayload.getBuf();
+
+            MinecraftKey channel = buf.p();
+            int length = buf.readVarInt();
+            int pid = buf.readVarInt();
+            Validate.validState(channel.equals(new MinecraftKey("fml:handshake")), "invalid FML2 handshake channel: %s", channel);
+            Validate.validState(pid == 2, "invalid FML2 handshake packet id: %d", pid);
+
+            int count = buf.readVarInt();
+            List<String> mods = new ArrayList<>(count);
+            for(int i = 0; i < count; ++i) {
+                mods.add(buf.readString());
+            }
+            LoginListener.LOGGER.info("Player {} has Forge mods {}", getGameProfile().getName(), mods);
+
+            this.g = EnumProtocolState.READY_TO_ACCEPT;
+            return;
+        }
+
         // Paper start - Velocity support
         if (com.destroystokyo.paper.PaperConfig.velocitySupport && packetloginincustompayload.getId() == this.velocityLoginMessageId) {
             PacketDataSerializer buf = packetloginincustompayload.getBuf();
