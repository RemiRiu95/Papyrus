From 8037975657d64c99f62dfb54d1259b8800a6625e Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Sun, 3 Nov 2019 16:08:17 +0000
Subject: [PATCH] Hybrid mode implementation


diff --git a/src/main/java/fr/thekinrar/papyrus/Metrics.java b/src/main/java/fr/thekinrar/papyrus/Metrics.java
index 7c284c9b2..da9d15cec 100644
--- a/src/main/java/fr/thekinrar/papyrus/Metrics.java
+++ b/src/main/java/fr/thekinrar/papyrus/Metrics.java
@@ -593,7 +593,7 @@ public class Metrics {
                 }));
 
                 metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
-                metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
+                metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? (Bukkit.getHybridMode() ? "hybrid" : "online") : "offline"));
                 metrics.addCustomChart(new Metrics.SimplePie("papyrus_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown"));
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
diff --git a/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java b/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
index 4168eafc0..447089ae5 100644
--- a/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
+++ b/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
@@ -1,34 +1,26 @@
 package fr.thekinrar.papyrus;
 
-import co.aikar.timings.Timings;
-import co.aikar.timings.TimingsManager;
-import com.destroystokyo.paper.PaperCommand;
-import com.destroystokyo.paper.io.chunk.ChunkTaskManager;
-import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
-import com.google.common.collect.Lists;
+import fr.thekinrar.papyrus.commands.ChangepassCommand;
+import fr.thekinrar.papyrus.commands.LoginCommand;
+import fr.thekinrar.papyrus.commands.RegisterCommand;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
-import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
-import org.spigotmc.SpigotConfig;
-import org.spigotmc.WatchdogThread;
 
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
-import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class PapyrusConfig {
@@ -62,6 +54,9 @@ public class PapyrusConfig {
         verbose = getBoolean("verbose", false);
 
         commands = new HashMap<String, Command>();
+        commands.put("changepass", new ChangepassCommand("changepass"));
+        commands.put("login", new LoginCommand("login"));
+        commands.put("register", new RegisterCommand("register"));
 
         version = getInt("config-version", 1);
         set("config-version", 1);
@@ -190,4 +185,69 @@ public class PapyrusConfig {
         config.addDefault(path, def);
         return config.getString(path, config.getString(path));
     }
+
+    public static boolean hybridMode = false;
+    private static void hybridMode() {
+        hybridMode = getBoolean("settings.hybridMode", false);
+    }
+
+    public static boolean hybridEnableAuthentication = true;
+    private static void hybridEnableAuthentication() {
+        hybridEnableAuthentication = getBoolean("hybrid.authentication", hybridEnableAuthentication);
+    }
+
+    public static String hybridRequestLoginMessage = "&e&lPlease login using /login <password>";
+    private static void hybridRequestLoginMessage() {
+        hybridRequestLoginMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.request-login", hybridRequestLoginMessage));
+    }
+
+    public static String hybridRequestRegisterMessage = "&e&lPlease register using /register <password> <password confirmation>";
+    private static void hybridRequestRegisterMessage() {
+        hybridRequestRegisterMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.request-register", hybridRequestRegisterMessage));
+    }
+
+    public static String hybridCommandUnavailableMessage = "&cCommand unavailable.";
+    private static void hybridCommandUnavailableMessage() {
+        hybridCommandUnavailableMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.command-unavailable", hybridCommandUnavailableMessage));
+    }
+
+    public static String hybridPlayerOnlyCommandMessage = "&cOnly players can use this command.";
+    private static void hybridPlayerOnlyCommandMessage() {
+        hybridPlayerOnlyCommandMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.player-only-command", hybridPlayerOnlyCommandMessage));
+    }
+
+    public static String hybridAlreadyLoggedInMessage = "&cAlready logged in.";
+    private static void hybridAlreadyLoggedInMessage() {
+        hybridAlreadyLoggedInMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.already-logged-in", hybridAlreadyLoggedInMessage));
+    }
+
+    public static String hybridAlreadyRegisteredMessage = "&cAlready registered.";
+    private static void hybridAlreadyRegisteredMessage() {
+        hybridAlreadyRegisteredMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.already-registered", hybridAlreadyRegisteredMessage));
+    }
+
+    public static String hybridSuccessfulLoginMessage = "&eSuccessfully logged in.";
+    private static void hybridSuccessfulLoginMessage() {
+        hybridSuccessfulLoginMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.successful-login", hybridSuccessfulLoginMessage));
+    }
+
+    public static String hybridFailedLoginMessage = "&cInvalid password.";
+    private static void hybridFailedLoginMessage() {
+        hybridFailedLoginMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.failed-login", hybridFailedLoginMessage));
+    }
+
+    public static String hybridSuccessfulRegisterMessage = "&eSuccessfully registered.";
+    private static void hybridSuccessfulRegisterMessage() {
+        hybridSuccessfulRegisterMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.successful-register", hybridSuccessfulRegisterMessage));
+    }
+
+    public static String hybridRegisterMismatchMessage = "&cPasswords do not match.";
+    private static void hybridRegisterMismatchMessage() {
+        hybridRegisterMismatchMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.register-mismatch", hybridRegisterMismatchMessage));
+    }
+
+    public static String hybridSuccessfulChangepassMessage = "&eSuccessfully changed password.";
+    private static void hybridSuccessfulChangepassMessage() {
+        hybridSuccessfulChangepassMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.successful-changepass", hybridSuccessfulChangepassMessage));
+    }
 }
diff --git a/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java b/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java
new file mode 100644
index 000000000..710620090
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java
@@ -0,0 +1,17 @@
+package fr.thekinrar.papyrus;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.bukkit.util.permissions.DefaultPermissions;
+
+public final class PapyrusPermissions {
+    private static final String ROOT= "papyrus.command";
+
+    public static void registerPermissions() {
+        Permission parent = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all Papyrus commands");
+        DefaultPermissions.registerPermission(ROOT + ".changepass", "Gives the user the ability to use the /papyrus:changepass command", PermissionDefault.TRUE, parent);
+        DefaultPermissions.registerPermission(ROOT + ".login", "Gives the user the ability to use the /papyrus:login command", PermissionDefault.TRUE, parent);
+        DefaultPermissions.registerPermission(ROOT + ".register", "Gives the user the ability to use the /papyrus:register command", PermissionDefault.TRUE, parent);
+        parent.recalculatePermissibles();
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/commands/ChangepassCommand.java b/src/main/java/fr/thekinrar/papyrus/commands/ChangepassCommand.java
new file mode 100644
index 000000000..c4c751177
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/commands/ChangepassCommand.java
@@ -0,0 +1,67 @@
+package fr.thekinrar.papyrus.commands;
+
+import fr.thekinrar.papyrus.PapyrusConfig;
+import fr.thekinrar.papyrus.hybrid.CraftHybridProfile;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+
+import java.util.Collections;
+import java.util.List;
+
+public class ChangepassCommand extends Command {
+
+    public ChangepassCommand(String name) {
+        super(name);
+        this.description = "Password changing for offline players";
+        this.usageMessage = "/changepass <current password> <new password> <new password confirmation>";
+        this.setPermission("papyrus.command.changepass");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (!Bukkit.getHybridMode()) {
+            sender.sendMessage(PapyrusConfig.hybridCommandUnavailableMessage);
+            return true;
+        }
+
+        if (!(sender instanceof Player)) {
+            sender.sendMessage(PapyrusConfig.hybridPlayerOnlyCommandMessage);
+            return true;
+        }
+
+        if (args.length != 3) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        CraftHybridProfile profile = ((CraftPlayer) sender).getHybridProfile();
+
+        if(!args[1].equals(args[2])) {
+            sender.sendMessage(PapyrusConfig.hybridRegisterMismatchMessage);
+            return true;
+        }
+
+        if(!profile.getEngine().verifyPassword(profile.getId(), sender.getName(), args[0])) {
+            sender.sendMessage(PapyrusConfig.hybridFailedLoginMessage);
+            return true;
+        }
+
+        profile.getEngine().setPassword(profile.getId(), args[1]);
+
+        sender.sendMessage(PapyrusConfig.hybridSuccessfulChangepassMessage);
+
+        return true;
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/commands/LoginCommand.java b/src/main/java/fr/thekinrar/papyrus/commands/LoginCommand.java
new file mode 100644
index 000000000..8e48cdefd
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/commands/LoginCommand.java
@@ -0,0 +1,69 @@
+package fr.thekinrar.papyrus.commands;
+
+import fr.thekinrar.papyrus.PapyrusConfig;
+import fr.thekinrar.papyrus.hybrid.CraftHybridProfile;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+
+import java.util.Collections;
+import java.util.List;
+
+public class LoginCommand extends Command {
+
+    public LoginCommand(String name) {
+        super(name);
+        this.description = "Login command for offline players";
+        this.usageMessage = "/login <password>";
+        this.setPermission("papyrus.command.login");
+        this.setUnauthenticated(true);
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (!Bukkit.getHybridMode()) {
+            sender.sendMessage(PapyrusConfig.hybridCommandUnavailableMessage);
+            return true;
+        }
+
+        if (!(sender instanceof Player)) {
+            sender.sendMessage(PapyrusConfig.hybridPlayerOnlyCommandMessage);
+            return true;
+        }
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        CraftHybridProfile profile = ((CraftPlayer) sender).getHybridProfile();
+
+        if(!profile.isRegistered()) {
+            profile.sendUnauthenticatedMessage();
+            return true;
+        }
+
+        if(profile.isLoggedIn()) {
+            sender.sendMessage(PapyrusConfig.hybridAlreadyLoggedInMessage);
+            return true;
+        }
+
+        if(profile.login(args[0]))
+            sender.sendMessage(PapyrusConfig.hybridSuccessfulLoginMessage);
+        else
+            sender.sendMessage(PapyrusConfig.hybridFailedLoginMessage);
+
+        return true;
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/commands/RegisterCommand.java b/src/main/java/fr/thekinrar/papyrus/commands/RegisterCommand.java
new file mode 100644
index 000000000..3eab2a83a
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/commands/RegisterCommand.java
@@ -0,0 +1,68 @@
+package fr.thekinrar.papyrus.commands;
+
+import fr.thekinrar.papyrus.PapyrusConfig;
+import fr.thekinrar.papyrus.hybrid.CraftHybridProfile;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+
+import java.util.Collections;
+import java.util.List;
+
+public class RegisterCommand extends Command {
+
+    public RegisterCommand(String name) {
+        super(name);
+        this.description = "Register command for offline players";
+        this.usageMessage = "/register <password> <password confirmation>";
+        this.setPermission("papyrus.command.register");
+        this.setUnauthenticated(true);
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (!Bukkit.getHybridMode()) {
+            sender.sendMessage(PapyrusConfig.hybridCommandUnavailableMessage);
+            return true;
+        }
+
+        if (!(sender instanceof Player)) {
+            sender.sendMessage(PapyrusConfig.hybridPlayerOnlyCommandMessage);
+            return true;
+        }
+
+        if (args.length != 2) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        CraftHybridProfile profile = ((CraftPlayer) sender).getHybridProfile();
+
+        if(profile.isRegistered()) {
+            sender.sendMessage(PapyrusConfig.hybridAlreadyRegisteredMessage);
+            return true;
+        }
+
+        if(!args[0].equals(args[1])) {
+            sender.sendMessage(PapyrusConfig.hybridRegisterMismatchMessage);
+            return true;
+        }
+
+        profile.register(args[0]);
+
+        sender.sendMessage(PapyrusConfig.hybridSuccessfulRegisterMessage);
+
+        return true;
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridEngine.java b/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridEngine.java
new file mode 100644
index 000000000..9023c2bf6
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridEngine.java
@@ -0,0 +1,213 @@
+package fr.thekinrar.papyrus.hybrid;
+
+import com.mojang.authlib.GameProfile;
+import net.minecraft.server.EntityHuman;
+import net.minecraft.server.NBTBase;
+import net.minecraft.server.NBTCompressedStreamTools;
+import net.minecraft.server.NBTTagCompound;
+import net.minecraft.server.NBTTagList;
+import org.apache.commons.codec.digest.DigestUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.CraftServer;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.security.MessageDigest;
+import java.security.SecureRandom;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+public class CraftHybridEngine implements HybridEngine {
+
+    public static final Logger LOGGER = LogManager.getLogger();
+
+    private final CraftServer server;
+    private final SecureRandom random = new SecureRandom();
+
+    private final File file = new File("hybrid.dat");
+
+    private final Map<UUID, UUID> onlineMapping = new HashMap<>();
+    private final Map<String, UUID> offlineMapping = new HashMap<>();
+
+    private final Map<UUID, byte[]> passwords = new HashMap<>();
+
+    private final List<HybridPasswordProvider> passwordProviders = new ArrayList<>();
+
+    public CraftHybridEngine(CraftServer server) {
+        this.server = server;
+
+        try {
+            load();
+        } catch (IOException e) {
+            LOGGER.error("Error loading hybrid.dat - server stopping", e);
+            server.shutdown();
+        }
+    }
+
+    public Logger getLogger() {
+        return LOGGER;
+    }
+
+    private void load() throws IOException {
+        if(!file.isFile())
+            return;
+
+        NBTTagCompound root = NBTCompressedStreamTools.readNBT(new DataInputStream(new FileInputStream(file)));
+
+        onlineMapping.clear();
+        for(NBTBase base : root.getList("OnlineMapping", 10)) {
+            NBTTagCompound mapping = (NBTTagCompound) base;
+            onlineMapping.put(mapping.getUUID("Key"), mapping.getUUID("Value"));
+        }
+
+        offlineMapping.clear();
+        for(NBTBase base : root.getList("OfflineMapping", 10)) {
+            NBTTagCompound mapping = (NBTTagCompound) base;
+            offlineMapping.put(mapping.getString("Key"), mapping.getUUID("Value"));
+        }
+
+        passwords.clear();
+        for(NBTBase base : root.getList("Passwords", 10)) {
+            NBTTagCompound mapping = (NBTTagCompound) base;
+            passwords.put(mapping.getUUID("Key"), mapping.getByteArray("Value"));
+        }
+    }
+
+    private void save() {
+        NBTTagCompound root = new NBTTagCompound();
+
+        NBTTagList nbtOnlineMapping = new NBTTagList();
+        nbtOnlineMapping.addAll(onlineMapping.entrySet().stream().map(entry -> {
+            NBTTagCompound nbt = new NBTTagCompound();
+            nbt.setUUID("Key", entry.getKey());
+            nbt.setUUID("Value", entry.getValue());
+            return nbt;
+        }).collect(Collectors.toList()));
+        root.set("OnlineMapping", nbtOnlineMapping);
+
+        NBTTagList nbtOfflineMapping = new NBTTagList();
+        nbtOfflineMapping.addAll(offlineMapping.entrySet().stream().map(entry -> {
+            NBTTagCompound nbt = new NBTTagCompound();
+            nbt.setString("Key", entry.getKey());
+            nbt.setUUID("Value", entry.getValue());
+            return nbt;
+        }).collect(Collectors.toList()));
+        root.set("OfflineMapping", nbtOfflineMapping);
+
+        NBTTagList nbtPasswords = new NBTTagList();
+        nbtPasswords.addAll(passwords.entrySet().stream().map(entry -> {
+            NBTTagCompound nbt = new NBTTagCompound();
+            nbt.setUUID("Key", entry.getKey());
+            nbt.setByteArray("Value", entry.getValue());
+            return nbt;
+        }).collect(Collectors.toList()));
+        root.set("Passwords", nbtPasswords);
+
+        try {
+            NBTCompressedStreamTools.writeNBT(root, new DataOutputStream(new FileOutputStream(file)));
+        } catch (IOException e) {
+            LOGGER.error("Error saving hybrid.dat", e);
+        }
+    }
+
+    public UUID getIdForOnlinePlayer(GameProfile online) {
+        if(onlineMapping.containsKey(online.getId())) {
+            // We already know this online player, return cached ID
+            return onlineMapping.get(online.getId());
+        }
+
+        // Unknown player: get, save, and return ID
+        // Saving current ID ensures ID will not change if name changes
+        UUID id = EntityHuman.getOfflineUUID(online.getName());
+        LOGGER.info("Saving new mapping for online player " + online.getName());
+        onlineMapping.put(online.getId(), id);
+        save();
+        return id;
+    }
+
+    public UUID getIdForOfflinePlayer(GameProfile offline) {
+        if(offlineMapping.containsKey(offline.getName())) {
+            // This player has a forced ID, return it
+            LOGGER.info("Player " + offline.getName() + " has a forced UUID mapping");
+            return offlineMapping.get(offline.getName());
+        }
+
+        // No forced ID: returning default offline ID
+        return EntityHuman.getOfflineUUID(offline.getName());
+    }
+
+    private byte[] hashPassword(String password) {
+        MessageDigest digest = DigestUtils.getSha256Digest();
+
+        byte[] salt = new byte[16];
+        random.nextBytes(salt);
+        digest.update(salt);
+
+        byte[] hash = new byte[49];
+        hash[0] = 0;
+        System.arraycopy(salt, 0, hash, 1, 16);
+        System.arraycopy(digest.digest(password.getBytes(StandardCharsets.UTF_8)), 0, hash, 17, 32);
+
+        return hash;
+    }
+
+    public void setPassword(UUID id, String password) {
+        passwords.put(id, hashPassword(password));
+        save();
+    }
+
+    public boolean verifyPassword(UUID id, String username, String password) {
+        byte[] hash = passwords.get(id);
+
+        if(hash == null)
+            return username != null && passwordProviders.stream().anyMatch(provider -> provider.verifyPassword(username, password));
+
+        if(hash[0] != 0)
+            return false;
+
+        MessageDigest digest = DigestUtils.getSha256Digest();
+        digest.update(Arrays.copyOfRange(hash, 1, 17));
+        byte[] vHash = digest.digest(password.getBytes(StandardCharsets.UTF_8));
+
+        return Arrays.equals(Arrays.copyOfRange(hash, 17, 49), vHash);
+    }
+
+    public CraftHybridProfile getProfile(UUID id) {
+        return new CraftHybridProfile(this, id);
+    }
+
+    boolean isRegistered(UUID id, String username) {
+        return passwords.containsKey(id) || (username != null && passwordProviders.stream().anyMatch(provider -> provider.hasPassword(username)));
+    }
+
+    @Override
+    public UUID getOfflineMapping(String name) {
+        return offlineMapping.get(name);
+    }
+
+    @Override
+    public void setOfflineMapping(String name, UUID id) {
+        if(id == null)
+            offlineMapping.remove(name);
+        else
+            offlineMapping.put(name, id);
+
+        save();
+    }
+
+    @Override
+    public void registerPasswordProvider(HybridPasswordProvider provider) {
+        passwordProviders.add(provider);
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridProfile.java b/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridProfile.java
new file mode 100644
index 000000000..a672dbc22
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridProfile.java
@@ -0,0 +1,90 @@
+package fr.thekinrar.papyrus.hybrid;
+
+import fr.thekinrar.papyrus.PapyrusConfig;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+
+import java.util.UUID;
+
+public class CraftHybridProfile implements HybridProfile {
+
+    private final CraftHybridEngine engine;
+    private final UUID id;
+
+    private CraftPlayer player;
+    private boolean loginRequested, registrationRequested;
+
+    CraftHybridProfile(CraftHybridEngine engine, UUID id) {
+        this.engine = engine;
+        this.id = id;
+    }
+
+    public CraftHybridEngine getEngine() {
+        return engine;
+    }
+
+    public UUID getId() {
+        return id;
+    }
+
+    public void authenticate(CraftPlayer player) {
+        this.player = player;
+
+        if(PapyrusConfig.hybridEnableAuthentication) {
+            if (isRegistered()) {
+                engine.getLogger().info("Requesting login for " + player.getName());
+                loginRequested = true;
+            } else {
+                engine.getLogger().info("Requesting registration for " + player.getName());
+                registrationRequested = true;
+            }
+
+            player.getHandle().unauthenticated = true;
+            sendUnauthenticatedMessage();
+        }
+    }
+
+    public void sendUnauthenticatedMessage() {
+        if(loginRequested)
+            player.sendMessage(PapyrusConfig.hybridRequestLoginMessage);
+        else if(registrationRequested)
+            player.sendMessage(PapyrusConfig.hybridRequestRegisterMessage);
+    }
+
+    public void register(String password) {
+        engine.setPassword(id, password);
+
+        registrationRequested = false;
+        player.getHandle().unauthenticated = false;
+    }
+
+    public boolean login(String password) {
+        if(engine.verifyPassword(id, player.getName(), password)) {
+            loginRequested = false;
+            player.getHandle().unauthenticated = false;
+
+            return true;
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean isRegistered() {
+        return engine.isRegistered(id, player.getName());
+    }
+
+    @Override
+    public boolean isLoggedIn() {
+        return !player.getHandle().unauthenticated;
+    }
+
+    @Override
+    public void setLoggedIn(boolean loggedIn) {
+        if(isRegistered()) {
+            loginRequested = player.getHandle().unauthenticated = !loggedIn;
+
+            if(!loggedIn)
+                sendUnauthenticatedMessage();
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index cd73cde8d..95888e7b5 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -17,9 +17,12 @@ import javax.annotation.Nullable;
 
 // CraftBukkit start
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.util.CraftVector;
 import org.bukkit.entity.Item;
 import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.player.PlayerBedLeaveEvent;
@@ -86,6 +89,10 @@ public abstract class EntityHuman extends EntityLiving {
     }
     // CraftBukkit end
 
+    // Papyrus start
+    public boolean unauthenticated = false;
+    // Papyrus end
+
     public EntityHuman(World world, GameProfile gameprofile) {
         super(EntityTypes.PLAYER, world);
         this.bY = ItemStack.a;
@@ -593,10 +600,7 @@ public abstract class EntityHuman extends EntityLiving {
             Player player = (Player) this.getBukkitEntity();
             Item drop = (Item) entityitem.getBukkitEntity();
 
-            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
-            this.world.getServer().getPluginManager().callEvent(event);
-
-            if (event.isCancelled()) {
+            if (hybridCall(new PlayerDropItemEvent(player, drop))) {
                 org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
                 if (flag1 && (cur == null || cur.getAmount() == 0)) {
                     // The complete stack was dropped
@@ -623,6 +627,14 @@ public abstract class EntityHuman extends EntityLiving {
         }
     }
 
+    public boolean hybridCall(Event event) {
+        if(unauthenticated)
+            return true;
+
+        this.world.getServer().getPluginManager().callEvent(event);
+        return event instanceof Cancellable && ((Cancellable) event).isCancelled();
+    }
+
     public float b(IBlockData iblockdata) {
         float f = this.inventory.a(iblockdata);
 
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index fa79d0bed..336c7a65d 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -25,6 +25,8 @@ import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.player.PlayerChangedMainHandEvent;
 import org.bukkit.event.player.PlayerChangedWorldEvent;
@@ -1960,4 +1962,14 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         return (CraftPlayer) super.getBukkitEntity();
     }
     // CraftBukkit end
+
+    @Override
+    public boolean hybridCall(Event event) {
+        if(super.hybridCall(event)) {
+            getBukkitEntity().getHybridProfile().sendUnauthenticatedMessage();
+            return true;
+        }
+
+        return false;
+    }
 }
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index a8773037e..fe68b0c31 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -4,13 +4,16 @@ import com.destroystokyo.paper.profile.CraftPlayerProfile;
 import com.destroystokyo.paper.profile.PlayerProfile;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
-import io.netty.channel.ChannelFuture;
+import com.mojang.authlib.properties.Property;
+import fr.thekinrar.papyrus.hybrid.CraftHybridEngine;
+
 import java.math.BigInteger;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.security.PrivateKey;
 import java.util.Arrays;
+import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -34,6 +37,7 @@ public class LoginListener implements PacketLoginInListener {
     private static final Random random = new Random();
     private final byte[] e = new byte[4];
     private final MinecraftServer server;
+    private final CraftHybridEngine hybridEngine;
     public final NetworkManager networkManager;
     private LoginListener.EnumProtocolState g; public final LoginListener.EnumProtocolState getLoginState() { return this.g; }; // Paper - OBFHELPER
     private int h;
@@ -48,6 +52,7 @@ public class LoginListener implements PacketLoginInListener {
         this.g = LoginListener.EnumProtocolState.HELLO;
         this.j = "";
         this.server = minecraftserver;
+        this.hybridEngine = minecraftserver.server.getHybridEngine();
         this.networkManager = networkmanager;
         LoginListener.random.nextBytes(this.e);
     }
@@ -190,7 +195,7 @@ public class LoginListener implements PacketLoginInListener {
     public void a(PacketLoginInStart packetlogininstart) {
         Validate.validState(this.g == LoginListener.EnumProtocolState.HELLO, "Unexpected hello packet", new Object[0]);
         this.i = packetlogininstart.b();
-        if (this.server.getOnlineMode() && !this.networkManager.isLocal()) {
+        if ((this.server.getOnlineMode() || Bukkit.getHybridMode()) && !this.networkManager.isLocal()) {
             this.g = LoginListener.EnumProtocolState.KEY;
             this.networkManager.sendPacket(new PacketLoginOutEncryptionBegin("", this.server.getKeyPair().getPublic(), this.e));
         } else {
@@ -248,7 +253,31 @@ public class LoginListener implements PacketLoginInListener {
                                 return;
                             }
 
+                            // Papyrus start
+                            if(Bukkit.getHybridMode()) {
+                                GameProfile onlineProfile = LoginListener.this.i;
+                                UUID id = hybridEngine.getIdForOnlinePlayer(onlineProfile);
+
+                                hybridEngine.getLogger().info("Player " + onlineProfile.getName() + " is online with UUID " + onlineProfile.getId());
+                                hybridEngine.getLogger().info("UUID of player " + onlineProfile.getName() + " is " + id);
+
+                                LoginListener.this.i = new GameProfile(id, onlineProfile.getName());
+                                for(Map.Entry<String, Property> e : onlineProfile.getProperties().entries()) {
+                                    LoginListener.this.i.getProperties().put(e.getKey(), e.getValue());
+                                }
+                            }
+                            // Papyrus end
+
                             new LoginHandler().fireEvents();
+                        } else if (Bukkit.getHybridMode()) { // Papyrus start
+                            UUID id = hybridEngine.getIdForOfflinePlayer(gameprofile);
+
+                            hybridEngine.getLogger().info("Player " + gameprofile.getName() + " is offline");
+                            hybridEngine.getLogger().info("UUID of player " + gameprofile.getName() + " is " + id);
+
+                            LoginListener.this.i = new GameProfile(id, gameprofile.getName());
+                            LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                            // Papyrus end
                         } else if (LoginListener.this.server.isEmbeddedServer()) {
                             LoginListener.LOGGER.warn("Failed to verify username but will let them in anyway!");
                             LoginListener.this.i = LoginListener.this.a(gameprofile);
@@ -340,7 +369,10 @@ public class LoginListener implements PacketLoginInListener {
                                 }
                             }
                             // CraftBukkit end
-                            LoginListener.LOGGER.info("UUID of player {} is {}", LoginListener.this.i.getName(), LoginListener.this.i.getId());
+
+                            if(!Bukkit.getHybridMode()) // Papyrus
+                                LoginListener.LOGGER.info("UUID of player {} is {}", LoginListener.this.i.getName(), LoginListener.this.i.getId());
+
                             LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
                 }
         }
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 3f5f45668..fc59d7eb8 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -7,6 +7,7 @@ import com.google.common.primitives.Floats;
 import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.suggestion.Suggestions;
+import fr.thekinrar.papyrus.hybrid.CraftHybridEngine;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import it.unimi.dsi.fastutil.ints.Int2ShortMap;
@@ -1013,6 +1014,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             }
                             // Paper end
 
+                            // Papyrus start - Hybrid mode
+                            if(player.unauthenticated) {
+                                this.internalTeleport(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch, Collections.emptySet());
+                                return;
+                            }
+                            // Papyrus end
+
                             if (!this.player.H() && (!this.player.getWorldServer().getGameRules().getBoolean(GameRules.DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isGliding())) {
                                 float f2 = this.player.isGliding() ? 300.0F : 100.0F;
 
@@ -1627,6 +1635,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 }
             }
 
+            if(player.unauthenticated && !isSync) {
+                CraftHybridEngine.LOGGER.warn(player.getName() + " tried chatting while unauthenticated: " + s);
+                getPlayer().getHybridProfile().sendUnauthenticatedMessage();
+                return;
+            }
+
             // CraftBukkit start
             if (isSync) {
                 try {
@@ -1810,7 +1824,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
         MinecraftTimings.playerCommandTimer.startTiming(); // Paper
         // CraftBukkit start - whole method
         if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
-        this.LOGGER.info(this.player.getName() + " issued server command: " + s);
+        {
+            if(player.unauthenticated)
+                this.LOGGER.info(this.player.getName() + " issued server command: " + s.split(" ")[0] + " ...");
+            else
+                this.LOGGER.info(this.player.getName() + " issued server command: " + s);
+        }
 
         CraftPlayer player = this.getPlayer();
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index e21f97d93..7d7acd248 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -296,6 +296,10 @@ public abstract class PlayerList {
         // Paper end
         // CraftBukkit - Moved from above, added world
         PlayerList.LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", entityplayer.getDisplayName().getString(), s1, entityplayer.getId(), entityplayer.world.worldData.getName(), entityplayer.locX, entityplayer.locY, entityplayer.locZ);
+
+        // Papyrus start
+        entityplayer.getBukkitEntity().initHybridProfile();
+        // Papyrus end
     }
 
     public void sendScoreboard(ScoreboardServer scoreboardserver, EntityPlayer entityplayer) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 623adca03..7af42be8f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -14,6 +14,9 @@ import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.LiteralCommandNode;
+import fr.thekinrar.papyrus.hybrid.CraftHybridEngine;
+import fr.thekinrar.papyrus.PapyrusConfig;
+import fr.thekinrar.papyrus.PapyrusPermissions;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
@@ -190,6 +193,7 @@ import org.bukkit.potion.PotionEffectType;
 import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.spigotmc.SpigotConfig;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
@@ -236,6 +240,7 @@ public final class CraftServer implements Server {
     private final List<CraftPlayer> playerView;
     public int reloadCount;
     public static Exception excessiveVelEx; // Paper - Velocity warnings
+    private final CraftHybridEngine hybridEngine = new CraftHybridEngine(this);
 
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
@@ -391,6 +396,7 @@ public final class CraftServer implements Server {
             commandMap.registerServerAliases();
             DefaultPermissions.registerCorePermissions();
             CraftDefaultPermissions.registerCorePermissions();
+            PapyrusPermissions.registerPermissions(); // Papyrus
             if (!com.destroystokyo.paper.PaperConfig.loadPermsBeforePlugins) loadCustomPermissions(); // Paper
             helpMap.initializeCommands();
             syncCommands();
@@ -828,6 +834,7 @@ public final class CraftServer implements Server {
         reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
+        fr.thekinrar.papyrus.PapyrusConfig.registerCommands(); // Papyrus
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
         ignoreVanillaPermissions = commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2168,4 +2175,26 @@ public final class CraftServer implements Server {
         return net.minecraft.server.MinecraftServer.currentTick;
     }
     // Paper end
+
+    // Papyrus start
+    @Override
+    public CraftHybridEngine getHybridEngine() {
+        return hybridEngine;
+    }
+
+    @Override
+    public boolean getHybridMode() {
+        if (PapyrusConfig.hybridMode) {
+            if (getOnlineMode()) {
+                getLogger().warning("Hybrid mode enabled but server is in online mode. Disabling hybrid mode.");
+                PapyrusConfig.hybridMode = false;
+            } else if(SpigotConfig.bungee) {
+                getLogger().warning("Hybrid mode enabled but bungee support is enabled. Disabling hybrid mode.");
+                PapyrusConfig.hybridMode = false;
+            }
+        }
+
+        return PapyrusConfig.hybridMode;
+    }
+    // Papyrus end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java b/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
index 2fd69c0f9..119602875 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
@@ -1,9 +1,13 @@
 package org.bukkit.craftbukkit.command;
 
 import java.util.Map;
+
+import fr.thekinrar.papyrus.hybrid.CraftHybridEngine;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
 import org.bukkit.command.SimpleCommandMap;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 
 public class CraftCommandMap extends SimpleCommandMap {
 
@@ -14,4 +18,19 @@ public class CraftCommandMap extends SimpleCommandMap {
     public Map<String, Command> getKnownCommands() {
         return knownCommands;
     }
+
+    @Override
+    protected boolean hybridExecute(Command command, CommandSender sender, String commandLabel, String[] args) {
+        if(sender instanceof CraftPlayer) {
+            CraftPlayer player = (CraftPlayer) sender;
+
+            if(player.getHandle().unauthenticated && !command.isUnauthenticated()) {
+                CraftHybridEngine.LOGGER.warn(player.getName() + " tried issuing server command while unauthenticated");
+                player.getHybridProfile().sendUnauthenticatedMessage();
+                return true;
+            }
+        }
+
+        return super.hybridExecute(command, sender, commandLabel, args);
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index b183b540b..4030abfa8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -7,6 +7,8 @@ import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
+import fr.thekinrar.papyrus.hybrid.CraftHybridProfile;
+import fr.thekinrar.papyrus.hybrid.HybridProfile;
 import io.netty.buffer.Unpooled;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -64,7 +66,6 @@ import net.minecraft.server.PacketPlayOutWorldEvent;
 import net.minecraft.server.PacketPlayOutWorldParticles;
 import net.minecraft.server.PlayerChunkMap;
 import net.minecraft.server.PlayerConnection;
-import net.minecraft.server.PlayerList;
 import net.minecraft.server.TileEntitySign;
 import net.minecraft.server.Vec3D;
 import net.minecraft.server.WhiteListEntry;
@@ -145,6 +146,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private long lastSaveTime;
     // Paper end
     private boolean canAlwaysOpenCommandBlocks = false; // Papyrus
+    private CraftHybridProfile hybridProfile;
 
     public CraftPlayer(CraftServer server, EntityPlayer entity) {
         super(server, entity);
@@ -2010,6 +2012,21 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         MinecraftServer.getServer().getPlayerList().d(getHandle());
     }
+
+    @Override
+    public CraftHybridProfile getHybridProfile() {
+        return hybridProfile;
+    }
+
+    public void initHybridProfile() {
+        if(server.getHybridMode() && hybridProfile == null) {
+            hybridProfile = server.getHybridEngine().getProfile(getUniqueId());
+
+            hybridProfile.authenticate(this);
+        } else {
+            hybridProfile = null;
+        }
+    }
     // Papyrus end
 
     // Spigot start
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index d476e1878..e37723167 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -11,6 +11,8 @@ import java.util.EnumMap;
 import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
+
+import fr.thekinrar.papyrus.hybrid.CraftHybridProfile;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.BlockPropertyInstrument;
 import net.minecraft.server.ChatMessage;
@@ -451,7 +453,13 @@ public class CraftEventFactory {
         if (cancelledBlock) {
             event.setUseInteractedBlock(Event.Result.DENY);
         }
-        craftServer.getPluginManager().callEvent(event);
+
+        if(who != null && who.unauthenticated) {
+            ((CraftHybridProfile)player.getHybridProfile()).sendUnauthenticatedMessage();
+            event.setCancelled(true);
+        } else {
+            craftServer.getPluginManager().callEvent(event);
+        }
 
         return event;
     }
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index d6f1d5785..2dc1da5cb 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -6,8 +6,10 @@
                 <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%logger] %minecraftFormatting{%msg}%n%xEx}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
-                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE,fr.thekinrar.papyrus."
+                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
                                   pattern="%highlightError{[%d{HH:mm:ss} %level]: %minecraftFormatting{%msg}%n%xEx}" />
+                    <PatternMatch key=",fr.thekinrar.papyrus.hybrid."
+                                  pattern="%highlightError{[%d{HH:mm:ss} %level]: Hybrid mode: %minecraftFormatting{%msg}%n%xEx}" />
                 </LoggerNamePatternSelector>
             </PatternLayout>
         </TerminalConsole>
@@ -16,8 +18,10 @@
                 <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %minecraftFormatting{%msg}{strip}%n">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
-                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE,fr.thekinrar.papyrus."
+                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
                                   pattern="[%d{HH:mm:ss}] [%t/%level]: %minecraftFormatting{%msg}{strip}%n" />
+                    <PatternMatch key=",fr.thekinrar.papyrus.hybrid."
+                                  pattern="%highlightError{[%d{HH:mm:ss} %level]: Hybrid mode: %minecraftFormatting{%msg}%n%xEx}" />
                 </LoggerNamePatternSelector>
             </PatternLayout>
             <Policies>
-- 
2.23.0

