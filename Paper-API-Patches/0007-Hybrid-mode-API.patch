From 9092d9d2fb37db92faf83c077a83c5b0f4420a51 Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Mon, 4 Nov 2019 19:42:56 +0000
Subject: [PATCH] Hybrid mode API


diff --git a/src/main/java/fr/thekinrar/papyrus/hybrid/HybridEngine.java b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridEngine.java
new file mode 100644
index 000000000..3ed8154f4
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridEngine.java
@@ -0,0 +1,27 @@
+package fr.thekinrar.papyrus.hybrid;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.UUID;
+
+public interface HybridEngine {
+
+    /**
+     * Gets the forced offline mapping for the specified username, if any.
+     * @param name Offline username to get the mapping for
+     * @return The forced UUID or null if none has been set
+     */
+    @Nullable
+    UUID getOfflineMapping(@NotNull String name);
+
+    /**
+     * Sets the forced offline mapping for the specified username.
+     * @param name Offline username to set the mapping for
+     * @param id The forced UUID to set or null to remove forced mapping
+     */
+    void setOfflineMapping(@NotNull String name, @Nullable UUID id);
+
+    void registerPasswordProvider(@NotNull HybridPasswordProvider provider);
+
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPasswordProvider.java b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPasswordProvider.java
new file mode 100644
index 000000000..c23af6b53
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPasswordProvider.java
@@ -0,0 +1,10 @@
+package fr.thekinrar.papyrus.hybrid;
+
+import org.jetbrains.annotations.NotNull;
+
+public interface HybridPasswordProvider {
+
+    boolean hasPassword(@NotNull String username);
+
+    boolean verifyPassword(@NotNull String username, @NotNull String password);
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/hybrid/HybridProfile.java b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridProfile.java
new file mode 100644
index 000000000..ff7782838
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridProfile.java
@@ -0,0 +1,8 @@
+package fr.thekinrar.papyrus.hybrid;
+
+public interface HybridProfile {
+
+    boolean isRegistered();
+
+    boolean isLoggedIn();
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index a97dab131..3c2b47446 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -14,6 +14,7 @@ import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
 
+import fr.thekinrar.papyrus.hybrid.HybridEngine;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -1606,6 +1607,22 @@ public final class Bukkit {
     }
     // Paper end
 
+    // Papyrus start
+    @NotNull
+    public static HybridEngine getHybridEngine() {
+        return server.getHybridEngine();
+    }
+
+    /**
+     * Gets whether the Server is in hybrid mode or not.
+     *
+     * @return true if the server is in hybrid mode, false otherwise
+     */
+    public static boolean getHybridMode() {
+        return server.getHybridMode();
+    }
+    // Papyrus end
+
     @NotNull
     public static Server.Spigot spigot()
     {
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 91c284314..25b76a96a 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -14,6 +14,7 @@ import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
 
+import fr.thekinrar.papyrus.hybrid.HybridEngine;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -1407,4 +1408,16 @@ public interface Server extends PluginMessageRecipient {
      */
     int getCurrentTick();
     // Paper end
+
+    // Papyrus start
+    @NotNull
+    HybridEngine getHybridEngine();
+
+    /**
+     * Gets whether the Server is in hybrid mode or not.
+     *
+     * @return true if the server is in hybrid mode, false otherwise
+     */
+    boolean getHybridMode();
+    // Papyrus end
 }
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index 0b0d1bd7c..cd2711185 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -35,6 +35,7 @@ public abstract class Command {
     private String permissionMessage;
     public co.aikar.timings.Timing timings; // Paper
     @NotNull public String getTimingName() {return getName();} // Paper
+    private boolean unauthenticated; // Papyrus
 
     protected Command(@NotNull String name) {
         this(name, "", "/" + name, new ArrayList<String>());
@@ -442,6 +443,14 @@ public abstract class Command {
         }
     }
 
+    public boolean isUnauthenticated() {
+        return unauthenticated;
+    }
+
+    public void setUnauthenticated(boolean unauthenticated) {
+        this.unauthenticated = unauthenticated;
+    }
+
     @Override
     public String toString() {
         return getClass().getName() + '(' + name + ')';
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 460fda05a..54d3b25df 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -156,7 +156,7 @@ public class SimpleCommandMap implements CommandMap {
         try {
             try (co.aikar.timings.Timing ignored = target.timings.startTiming()) { // Paper - use try with resources
             // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
-            target.execute(sender, sentCommandLabel, Arrays.copyOfRange(args, 1, args.length));
+            hybridExecute(target, sender, sentCommandLabel, Arrays.copyOfRange(args, 1, args.length));
             } // target.timings.stopTiming(); // Spigot // Paper
         } catch (CommandException ex) {
             server.getPluginManager().callEvent(new ServerExceptionEvent(new ServerCommandException(ex, target, sender, args))); // Paper
@@ -173,6 +173,10 @@ public class SimpleCommandMap implements CommandMap {
         return true;
     }
 
+    protected boolean hybridExecute(@NotNull Command command, @NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+        return command.execute(sender, commandLabel, args);
+    }
+
     @Override
     public synchronized void clearCommands() {
         for (Map.Entry<String, Command> entry : knownCommands.entrySet()) {
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 2ffbc3756..738409f6d 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -5,6 +5,7 @@ import java.util.Date; // Paper
 
 import com.destroystokyo.paper.Title;
 import com.destroystokyo.paper.profile.PlayerProfile;
+import fr.thekinrar.papyrus.hybrid.HybridProfile;
 import org.bukkit.Achievement;
 import org.bukkit.BanEntry; // Paper
 import org.bukkit.BanList; // Paper
@@ -1994,6 +1995,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param canAlwaysOpenCommandBlocks whether this player can always open command blocks
      */
     void setCanAlwaysOpenCommandBlocks(boolean canAlwaysOpenCommandBlocks);
+
+    @NotNull
+    HybridProfile getHybridProfile();
     // Papyrus end
 
     // Spigot start
-- 
2.23.0

